{"ast":null,"code":"import React from 'react';\nimport { expandRows } from '../utils';\nimport { useGetLatest, actions, useMountedLayoutEffect, makePropGetter, ensurePluginOrder } from '../publicUtils'; // Actions\n\nactions.resetExpanded = 'resetExpanded';\nactions.toggleRowExpanded = 'toggleRowExpanded';\nactions.toggleAllRowsExpanded = 'toggleAllRowsExpanded';\nexport const useExpanded = hooks => {\n  hooks.getToggleAllRowsExpandedProps = [defaultGetToggleAllRowsExpandedProps];\n  hooks.getToggleRowExpandedProps = [defaultGetToggleRowExpandedProps];\n  hooks.stateReducers.push(reducer);\n  hooks.useInstance.push(useInstance);\n  hooks.prepareRow.push(prepareRow);\n};\nuseExpanded.pluginName = 'useExpanded';\n\nconst defaultGetToggleAllRowsExpandedProps = (props, _ref) => {\n  let {\n    instance\n  } = _ref;\n  return [props, {\n    onClick: e => {\n      instance.toggleAllRowsExpanded();\n    },\n    style: {\n      cursor: 'pointer'\n    },\n    title: 'Toggle All Rows Expanded'\n  }];\n};\n\nconst defaultGetToggleRowExpandedProps = (props, _ref2) => {\n  let {\n    row\n  } = _ref2;\n  return [props, {\n    onClick: () => {\n      row.toggleRowExpanded();\n    },\n    style: {\n      cursor: 'pointer'\n    },\n    title: 'Toggle Row Expanded'\n  }];\n}; // Reducer\n\n\nfunction reducer(state, action, previousState, instance) {\n  if (action.type === actions.init) {\n    return {\n      expanded: {},\n      ...state\n    };\n  }\n\n  if (action.type === actions.resetExpanded) {\n    return { ...state,\n      expanded: instance.initialState.expanded || {}\n    };\n  }\n\n  if (action.type === actions.toggleAllRowsExpanded) {\n    const {\n      value\n    } = action;\n    const {\n      isAllRowsExpanded,\n      rowsById\n    } = instance;\n    const expandAll = typeof value !== 'undefined' ? value : !isAllRowsExpanded;\n\n    if (expandAll) {\n      const expanded = {};\n      Object.keys(rowsById).forEach(rowId => {\n        expanded[rowId] = true;\n      });\n      return { ...state,\n        expanded\n      };\n    }\n\n    return { ...state,\n      expanded: {}\n    };\n  }\n\n  if (action.type === actions.toggleRowExpanded) {\n    const {\n      id,\n      value: setExpanded\n    } = action;\n    const exists = state.expanded[id];\n    const shouldExist = typeof setExpanded !== 'undefined' ? setExpanded : !exists;\n\n    if (!exists && shouldExist) {\n      return { ...state,\n        expanded: { ...state.expanded,\n          [id]: true\n        }\n      };\n    } else if (exists && !shouldExist) {\n      const {\n        [id]: _,\n        ...rest\n      } = state.expanded;\n      return { ...state,\n        expanded: rest\n      };\n    } else {\n      return state;\n    }\n  }\n}\n\nfunction useInstance(instance) {\n  const {\n    data,\n    rows,\n    rowsById,\n    manualExpandedKey = 'expanded',\n    paginateExpandedRows = true,\n    expandSubRows = true,\n    autoResetExpanded = true,\n    getHooks,\n    plugins,\n    state: {\n      expanded\n    },\n    dispatch\n  } = instance;\n  ensurePluginOrder(plugins, ['useSortBy', 'useGroupBy', 'usePivotColumns', 'useGlobalFilter'], 'useExpanded');\n  const getAutoResetExpanded = useGetLatest(autoResetExpanded);\n  let isAllRowsExpanded = Boolean(Object.keys(rowsById).length && Object.keys(expanded).length);\n\n  if (isAllRowsExpanded) {\n    if (Object.keys(rowsById).some(id => !expanded[id])) {\n      isAllRowsExpanded = false;\n    }\n  } // Bypass any effects from firing when this changes\n\n\n  useMountedLayoutEffect(() => {\n    if (getAutoResetExpanded()) {\n      dispatch({\n        type: actions.resetExpanded\n      });\n    }\n  }, [dispatch, data]);\n  const toggleRowExpanded = React.useCallback((id, value) => {\n    dispatch({\n      type: actions.toggleRowExpanded,\n      id,\n      value\n    });\n  }, [dispatch]);\n  const toggleAllRowsExpanded = React.useCallback(value => dispatch({\n    type: actions.toggleAllRowsExpanded,\n    value\n  }), [dispatch]);\n  const expandedRows = React.useMemo(() => {\n    if (paginateExpandedRows) {\n      return expandRows(rows, {\n        manualExpandedKey,\n        expanded,\n        expandSubRows\n      });\n    }\n\n    return rows;\n  }, [paginateExpandedRows, rows, manualExpandedKey, expanded, expandSubRows]);\n  const expandedDepth = React.useMemo(() => findExpandedDepth(expanded), [expanded]);\n  const getInstance = useGetLatest(instance);\n  const getToggleAllRowsExpandedProps = makePropGetter(getHooks().getToggleAllRowsExpandedProps, {\n    instance: getInstance()\n  });\n  Object.assign(instance, {\n    preExpandedRows: rows,\n    expandedRows,\n    rows: expandedRows,\n    expandedDepth,\n    isAllRowsExpanded,\n    toggleRowExpanded,\n    toggleAllRowsExpanded,\n    getToggleAllRowsExpandedProps\n  });\n}\n\nfunction prepareRow(row, _ref3) {\n  let {\n    instance: {\n      getHooks\n    },\n    instance\n  } = _ref3;\n\n  row.toggleRowExpanded = set => instance.toggleRowExpanded(row.id, set);\n\n  row.getToggleRowExpandedProps = makePropGetter(getHooks().getToggleRowExpandedProps, {\n    instance,\n    row\n  });\n}\n\nfunction findExpandedDepth(expanded) {\n  let maxDepth = 0;\n  Object.keys(expanded).forEach(id => {\n    const splitId = id.split('.');\n    maxDepth = Math.max(maxDepth, splitId.length);\n  });\n  return maxDepth;\n}","map":{"version":3,"sources":["C:/Projects/TableSite/tablesite2/node_modules/react-table/src/plugin-hooks/useExpanded.js"],"names":["React","expandRows","useGetLatest","actions","useMountedLayoutEffect","makePropGetter","ensurePluginOrder","resetExpanded","toggleRowExpanded","toggleAllRowsExpanded","useExpanded","hooks","getToggleAllRowsExpandedProps","defaultGetToggleAllRowsExpandedProps","getToggleRowExpandedProps","defaultGetToggleRowExpandedProps","stateReducers","push","reducer","useInstance","prepareRow","pluginName","props","instance","onClick","e","style","cursor","title","row","state","action","previousState","type","init","expanded","initialState","value","isAllRowsExpanded","rowsById","expandAll","Object","keys","forEach","rowId","id","setExpanded","exists","shouldExist","_","rest","data","rows","manualExpandedKey","paginateExpandedRows","expandSubRows","autoResetExpanded","getHooks","plugins","dispatch","getAutoResetExpanded","Boolean","length","some","useCallback","expandedRows","useMemo","expandedDepth","findExpandedDepth","getInstance","assign","preExpandedRows","set","maxDepth","splitId","split","Math","max"],"mappings":"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","sourcesContent":["import React from 'react'\n\nimport { expandRows } from '../utils'\n\nimport {\n  useGetLatest,\n  actions,\n  useMountedLayoutEffect,\n  makePropGetter,\n  ensurePluginOrder,\n} from '../publicUtils'\n\n// Actions\nactions.resetExpanded = 'resetExpanded'\nactions.toggleRowExpanded = 'toggleRowExpanded'\nactions.toggleAllRowsExpanded = 'toggleAllRowsExpanded'\n\nexport const useExpanded = hooks => {\n  hooks.getToggleAllRowsExpandedProps = [defaultGetToggleAllRowsExpandedProps]\n  hooks.getToggleRowExpandedProps = [defaultGetToggleRowExpandedProps]\n  hooks.stateReducers.push(reducer)\n  hooks.useInstance.push(useInstance)\n  hooks.prepareRow.push(prepareRow)\n}\n\nuseExpanded.pluginName = 'useExpanded'\n\nconst defaultGetToggleAllRowsExpandedProps = (props, { instance }) => [\n  props,\n  {\n    onClick: e => {\n      instance.toggleAllRowsExpanded()\n    },\n    style: {\n      cursor: 'pointer',\n    },\n    title: 'Toggle All Rows Expanded',\n  },\n]\n\nconst defaultGetToggleRowExpandedProps = (props, { row }) => [\n  props,\n  {\n    onClick: () => {\n      row.toggleRowExpanded()\n    },\n    style: {\n      cursor: 'pointer',\n    },\n    title: 'Toggle Row Expanded',\n  },\n]\n\n// Reducer\nfunction reducer(state, action, previousState, instance) {\n  if (action.type === actions.init) {\n    return {\n      expanded: {},\n      ...state,\n    }\n  }\n\n  if (action.type === actions.resetExpanded) {\n    return {\n      ...state,\n      expanded: instance.initialState.expanded || {},\n    }\n  }\n\n  if (action.type === actions.toggleAllRowsExpanded) {\n    const { value } = action\n    const { isAllRowsExpanded, rowsById } = instance\n\n    const expandAll = typeof value !== 'undefined' ? value : !isAllRowsExpanded\n\n    if (expandAll) {\n      const expanded = {}\n\n      Object.keys(rowsById).forEach(rowId => {\n        expanded[rowId] = true\n      })\n\n      return {\n        ...state,\n        expanded,\n      }\n    }\n\n    return {\n      ...state,\n      expanded: {},\n    }\n  }\n\n  if (action.type === actions.toggleRowExpanded) {\n    const { id, value: setExpanded } = action\n    const exists = state.expanded[id]\n\n    const shouldExist =\n      typeof setExpanded !== 'undefined' ? setExpanded : !exists\n\n    if (!exists && shouldExist) {\n      return {\n        ...state,\n        expanded: {\n          ...state.expanded,\n          [id]: true,\n        },\n      }\n    } else if (exists && !shouldExist) {\n      const { [id]: _, ...rest } = state.expanded\n      return {\n        ...state,\n        expanded: rest,\n      }\n    } else {\n      return state\n    }\n  }\n}\n\nfunction useInstance(instance) {\n  const {\n    data,\n    rows,\n    rowsById,\n    manualExpandedKey = 'expanded',\n    paginateExpandedRows = true,\n    expandSubRows = true,\n    autoResetExpanded = true,\n    getHooks,\n    plugins,\n    state: { expanded },\n    dispatch,\n  } = instance\n\n  ensurePluginOrder(\n    plugins,\n    ['useSortBy', 'useGroupBy', 'usePivotColumns', 'useGlobalFilter'],\n    'useExpanded'\n  )\n\n  const getAutoResetExpanded = useGetLatest(autoResetExpanded)\n\n  let isAllRowsExpanded = Boolean(\n    Object.keys(rowsById).length && Object.keys(expanded).length\n  )\n\n  if (isAllRowsExpanded) {\n    if (Object.keys(rowsById).some(id => !expanded[id])) {\n      isAllRowsExpanded = false\n    }\n  }\n\n  // Bypass any effects from firing when this changes\n  useMountedLayoutEffect(() => {\n    if (getAutoResetExpanded()) {\n      dispatch({ type: actions.resetExpanded })\n    }\n  }, [dispatch, data])\n\n  const toggleRowExpanded = React.useCallback(\n    (id, value) => {\n      dispatch({ type: actions.toggleRowExpanded, id, value })\n    },\n    [dispatch]\n  )\n\n  const toggleAllRowsExpanded = React.useCallback(\n    value => dispatch({ type: actions.toggleAllRowsExpanded, value }),\n    [dispatch]\n  )\n\n  const expandedRows = React.useMemo(() => {\n    if (paginateExpandedRows) {\n      return expandRows(rows, { manualExpandedKey, expanded, expandSubRows })\n    }\n\n    return rows\n  }, [paginateExpandedRows, rows, manualExpandedKey, expanded, expandSubRows])\n\n  const expandedDepth = React.useMemo(() => findExpandedDepth(expanded), [\n    expanded,\n  ])\n\n  const getInstance = useGetLatest(instance)\n\n  const getToggleAllRowsExpandedProps = makePropGetter(\n    getHooks().getToggleAllRowsExpandedProps,\n    { instance: getInstance() }\n  )\n\n  Object.assign(instance, {\n    preExpandedRows: rows,\n    expandedRows,\n    rows: expandedRows,\n    expandedDepth,\n    isAllRowsExpanded,\n    toggleRowExpanded,\n    toggleAllRowsExpanded,\n    getToggleAllRowsExpandedProps,\n  })\n}\n\nfunction prepareRow(row, { instance: { getHooks }, instance }) {\n  row.toggleRowExpanded = set => instance.toggleRowExpanded(row.id, set)\n\n  row.getToggleRowExpandedProps = makePropGetter(\n    getHooks().getToggleRowExpandedProps,\n    {\n      instance,\n      row,\n    }\n  )\n}\n\nfunction findExpandedDepth(expanded) {\n  let maxDepth = 0\n\n  Object.keys(expanded).forEach(id => {\n    const splitId = id.split('.')\n    maxDepth = Math.max(maxDepth, splitId.length)\n  })\n\n  return maxDepth\n}\n"]},"metadata":{},"sourceType":"module"}