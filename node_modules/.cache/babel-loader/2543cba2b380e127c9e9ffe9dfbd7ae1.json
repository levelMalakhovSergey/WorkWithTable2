{"ast":null,"code":"/* istanbul ignore file */\nimport { actions, makePropGetter, ensurePluginOrder, useMountedLayoutEffect, useGetLatest } from '../publicUtils';\nimport { flattenColumns, getFirstDefined } from '../utils'; // Actions\n\nactions.resetPivot = 'resetPivot';\nactions.togglePivot = 'togglePivot';\nexport const _UNSTABLE_usePivotColumns = hooks => {\n  hooks.getPivotToggleProps = [defaultGetPivotToggleProps];\n  hooks.stateReducers.push(reducer);\n  hooks.useInstanceAfterData.push(useInstanceAfterData);\n  hooks.allColumns.push(allColumns);\n  hooks.accessValue.push(accessValue);\n  hooks.materializedColumns.push(materializedColumns);\n  hooks.materializedColumnsDeps.push(materializedColumnsDeps);\n  hooks.visibleColumns.push(visibleColumns);\n  hooks.visibleColumnsDeps.push(visibleColumnsDeps);\n  hooks.useInstance.push(useInstance);\n  hooks.prepareRow.push(prepareRow);\n};\n_UNSTABLE_usePivotColumns.pluginName = 'usePivotColumns';\nconst defaultPivotColumns = [];\n\nconst defaultGetPivotToggleProps = (props, _ref) => {\n  let {\n    header\n  } = _ref;\n  return [props, {\n    onClick: header.canPivot ? e => {\n      e.persist();\n      header.togglePivot();\n    } : undefined,\n    style: {\n      cursor: header.canPivot ? 'pointer' : undefined\n    },\n    title: 'Toggle Pivot'\n  }];\n}; // Reducer\n\n\nfunction reducer(state, action, previousState, instance) {\n  if (action.type === actions.init) {\n    return {\n      pivotColumns: defaultPivotColumns,\n      ...state\n    };\n  }\n\n  if (action.type === actions.resetPivot) {\n    return { ...state,\n      pivotColumns: instance.initialState.pivotColumns || defaultPivotColumns\n    };\n  }\n\n  if (action.type === actions.togglePivot) {\n    const {\n      columnId,\n      value: setPivot\n    } = action;\n    const resolvedPivot = typeof setPivot !== 'undefined' ? setPivot : !state.pivotColumns.includes(columnId);\n\n    if (resolvedPivot) {\n      return { ...state,\n        pivotColumns: [...state.pivotColumns, columnId]\n      };\n    }\n\n    return { ...state,\n      pivotColumns: state.pivotColumns.filter(d => d !== columnId)\n    };\n  }\n}\n\nfunction useInstanceAfterData(instance) {\n  instance.allColumns.forEach(column => {\n    column.isPivotSource = instance.state.pivotColumns.includes(column.id);\n  });\n}\n\nfunction allColumns(columns, _ref2) {\n  let {\n    instance\n  } = _ref2;\n  columns.forEach(column => {\n    column.isPivotSource = instance.state.pivotColumns.includes(column.id);\n    column.uniqueValues = new Set();\n  });\n  return columns;\n}\n\nfunction accessValue(value, _ref3) {\n  let {\n    column\n  } = _ref3;\n\n  if (column.uniqueValues && typeof value !== 'undefined') {\n    column.uniqueValues.add(value);\n  }\n\n  return value;\n}\n\nfunction materializedColumns(materialized, _ref4) {\n  let {\n    instance\n  } = _ref4;\n  const {\n    allColumns,\n    state\n  } = instance;\n\n  if (!state.pivotColumns.length || !state.groupBy || !state.groupBy.length) {\n    return materialized;\n  }\n\n  const pivotColumns = state.pivotColumns.map(id => allColumns.find(d => d.id === id)).filter(Boolean);\n  const sourceColumns = allColumns.filter(d => !d.isPivotSource && !state.groupBy.includes(d.id) && !state.pivotColumns.includes(d.id));\n\n  const buildPivotColumns = function () {\n    let depth = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n    let parent = arguments.length > 1 ? arguments[1] : undefined;\n    let pivotFilters = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];\n    const pivotColumn = pivotColumns[depth];\n\n    if (!pivotColumn) {\n      return sourceColumns.map(sourceColumn => {\n        // TODO: We could offer support here for renesting pivoted\n        // columns inside copies of their header groups. For now,\n        // that seems like it would be (1) overkill on nesting, considering\n        // you already get nesting for every pivot level and (2)\n        // really hard. :)\n        return { ...sourceColumn,\n          canPivot: false,\n          isPivoted: true,\n          parent,\n          depth: depth,\n          id: `${parent ? `${parent.id}.${sourceColumn.id}` : sourceColumn.id}`,\n          accessor: (originalRow, i, row) => {\n            if (pivotFilters.every(filter => filter(row))) {\n              return row.values[sourceColumn.id];\n            }\n          }\n        };\n      });\n    }\n\n    const uniqueValues = Array.from(pivotColumn.uniqueValues).sort();\n    return uniqueValues.map(uniqueValue => {\n      const columnGroup = { ...pivotColumn,\n        Header: pivotColumn.PivotHeader || typeof pivotColumn.header === 'string' ? `${pivotColumn.Header}: ${uniqueValue}` : uniqueValue,\n        isPivotGroup: true,\n        parent,\n        depth,\n        id: parent ? `${parent.id}.${pivotColumn.id}.${uniqueValue}` : `${pivotColumn.id}.${uniqueValue}`,\n        pivotValue: uniqueValue\n      };\n      columnGroup.columns = buildPivotColumns(depth + 1, columnGroup, [...pivotFilters, row => row.values[pivotColumn.id] === uniqueValue]);\n      return columnGroup;\n    });\n  };\n\n  const newMaterialized = flattenColumns(buildPivotColumns());\n  return [...materialized, ...newMaterialized];\n}\n\nfunction materializedColumnsDeps(deps, _ref5) {\n  let {\n    instance: {\n      state: {\n        pivotColumns,\n        groupBy\n      }\n    }\n  } = _ref5;\n  return [...deps, pivotColumns, groupBy];\n}\n\nfunction visibleColumns(visibleColumns, _ref6) {\n  let {\n    instance: {\n      state\n    }\n  } = _ref6;\n  visibleColumns = visibleColumns.filter(d => !d.isPivotSource);\n\n  if (state.pivotColumns.length && state.groupBy && state.groupBy.length) {\n    visibleColumns = visibleColumns.filter(column => column.isGrouped || column.isPivoted);\n  }\n\n  return visibleColumns;\n}\n\nfunction visibleColumnsDeps(deps, _ref7) {\n  let {\n    instance\n  } = _ref7;\n  return [...deps, instance.state.pivotColumns, instance.state.groupBy];\n}\n\nfunction useInstance(instance) {\n  const {\n    columns,\n    allColumns,\n    flatHeaders,\n    // pivotFn = defaultPivotFn,\n    // manualPivot,\n    getHooks,\n    plugins,\n    dispatch,\n    autoResetPivot = true,\n    manaulPivot,\n    disablePivot,\n    defaultCanPivot\n  } = instance;\n  ensurePluginOrder(plugins, ['useGroupBy'], 'usePivotColumns');\n  const getInstance = useGetLatest(instance);\n  allColumns.forEach(column => {\n    const {\n      accessor,\n      defaultPivot: defaultColumnPivot,\n      disablePivot: columnDisablePivot\n    } = column;\n    column.canPivot = accessor ? getFirstDefined(column.canPivot, columnDisablePivot === true ? false : undefined, disablePivot === true ? false : undefined, true) : getFirstDefined(column.canPivot, defaultColumnPivot, defaultCanPivot, false);\n\n    if (column.canPivot) {\n      column.togglePivot = () => instance.togglePivot(column.id);\n    }\n\n    column.Aggregated = column.Aggregated || column.Cell;\n  });\n\n  const togglePivot = (columnId, value) => {\n    dispatch({\n      type: actions.togglePivot,\n      columnId,\n      value\n    });\n  };\n\n  flatHeaders.forEach(header => {\n    header.getPivotToggleProps = makePropGetter(getHooks().getPivotToggleProps, {\n      instance: getInstance(),\n      header\n    });\n  });\n  const getAutoResetPivot = useGetLatest(autoResetPivot);\n  useMountedLayoutEffect(() => {\n    if (getAutoResetPivot()) {\n      dispatch({\n        type: actions.resetPivot\n      });\n    }\n  }, [dispatch, manaulPivot ? null : columns]);\n  Object.assign(instance, {\n    togglePivot\n  });\n}\n\nfunction prepareRow(row) {\n  row.allCells.forEach(cell => {\n    // Grouped cells are in the pivotColumns and the pivot cell for the row\n    cell.isPivoted = cell.column.isPivoted;\n  });\n}","map":{"version":3,"sources":["C:/Projects/TableSite/tablesite2/node_modules/react-table/src/plugin-hooks/_UNSTABLE_usePivotColumns.js"],"names":["actions","makePropGetter","ensurePluginOrder","useMountedLayoutEffect","useGetLatest","flattenColumns","getFirstDefined","resetPivot","togglePivot","_UNSTABLE_usePivotColumns","hooks","getPivotToggleProps","defaultGetPivotToggleProps","stateReducers","push","reducer","useInstanceAfterData","allColumns","accessValue","materializedColumns","materializedColumnsDeps","visibleColumns","visibleColumnsDeps","useInstance","prepareRow","pluginName","defaultPivotColumns","props","header","onClick","canPivot","e","persist","undefined","style","cursor","title","state","action","previousState","instance","type","init","pivotColumns","initialState","columnId","value","setPivot","resolvedPivot","includes","filter","d","forEach","column","isPivotSource","id","columns","uniqueValues","Set","add","materialized","length","groupBy","map","find","Boolean","sourceColumns","buildPivotColumns","depth","parent","pivotFilters","pivotColumn","sourceColumn","isPivoted","accessor","originalRow","i","row","every","values","Array","from","sort","uniqueValue","columnGroup","Header","PivotHeader","isPivotGroup","pivotValue","newMaterialized","deps","isGrouped","flatHeaders","getHooks","plugins","dispatch","autoResetPivot","manaulPivot","disablePivot","defaultCanPivot","getInstance","defaultPivot","defaultColumnPivot","columnDisablePivot","Aggregated","Cell","getAutoResetPivot","Object","assign","allCells","cell"],"mappings":"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","sourcesContent":["/* istanbul ignore file */\n\nimport {\n  actions,\n  makePropGetter,\n  ensurePluginOrder,\n  useMountedLayoutEffect,\n  useGetLatest,\n} from '../publicUtils'\n\nimport { flattenColumns, getFirstDefined } from '../utils'\n\n// Actions\nactions.resetPivot = 'resetPivot'\nactions.togglePivot = 'togglePivot'\n\nexport const _UNSTABLE_usePivotColumns = hooks => {\n  hooks.getPivotToggleProps = [defaultGetPivotToggleProps]\n  hooks.stateReducers.push(reducer)\n  hooks.useInstanceAfterData.push(useInstanceAfterData)\n  hooks.allColumns.push(allColumns)\n  hooks.accessValue.push(accessValue)\n  hooks.materializedColumns.push(materializedColumns)\n  hooks.materializedColumnsDeps.push(materializedColumnsDeps)\n  hooks.visibleColumns.push(visibleColumns)\n  hooks.visibleColumnsDeps.push(visibleColumnsDeps)\n  hooks.useInstance.push(useInstance)\n  hooks.prepareRow.push(prepareRow)\n}\n\n_UNSTABLE_usePivotColumns.pluginName = 'usePivotColumns'\n\nconst defaultPivotColumns = []\n\nconst defaultGetPivotToggleProps = (props, { header }) => [\n  props,\n  {\n    onClick: header.canPivot\n      ? e => {\n          e.persist()\n          header.togglePivot()\n        }\n      : undefined,\n    style: {\n      cursor: header.canPivot ? 'pointer' : undefined,\n    },\n    title: 'Toggle Pivot',\n  },\n]\n\n// Reducer\nfunction reducer(state, action, previousState, instance) {\n  if (action.type === actions.init) {\n    return {\n      pivotColumns: defaultPivotColumns,\n      ...state,\n    }\n  }\n\n  if (action.type === actions.resetPivot) {\n    return {\n      ...state,\n      pivotColumns: instance.initialState.pivotColumns || defaultPivotColumns,\n    }\n  }\n\n  if (action.type === actions.togglePivot) {\n    const { columnId, value: setPivot } = action\n\n    const resolvedPivot =\n      typeof setPivot !== 'undefined'\n        ? setPivot\n        : !state.pivotColumns.includes(columnId)\n\n    if (resolvedPivot) {\n      return {\n        ...state,\n        pivotColumns: [...state.pivotColumns, columnId],\n      }\n    }\n\n    return {\n      ...state,\n      pivotColumns: state.pivotColumns.filter(d => d !== columnId),\n    }\n  }\n}\n\nfunction useInstanceAfterData(instance) {\n  instance.allColumns.forEach(column => {\n    column.isPivotSource = instance.state.pivotColumns.includes(column.id)\n  })\n}\n\nfunction allColumns(columns, { instance }) {\n  columns.forEach(column => {\n    column.isPivotSource = instance.state.pivotColumns.includes(column.id)\n    column.uniqueValues = new Set()\n  })\n  return columns\n}\n\nfunction accessValue(value, { column }) {\n  if (column.uniqueValues && typeof value !== 'undefined') {\n    column.uniqueValues.add(value)\n  }\n  return value\n}\n\nfunction materializedColumns(materialized, { instance }) {\n  const { allColumns, state } = instance\n\n  if (!state.pivotColumns.length || !state.groupBy || !state.groupBy.length) {\n    return materialized\n  }\n\n  const pivotColumns = state.pivotColumns\n    .map(id => allColumns.find(d => d.id === id))\n    .filter(Boolean)\n\n  const sourceColumns = allColumns.filter(\n    d =>\n      !d.isPivotSource &&\n      !state.groupBy.includes(d.id) &&\n      !state.pivotColumns.includes(d.id)\n  )\n\n  const buildPivotColumns = (depth = 0, parent, pivotFilters = []) => {\n    const pivotColumn = pivotColumns[depth]\n\n    if (!pivotColumn) {\n      return sourceColumns.map(sourceColumn => {\n        // TODO: We could offer support here for renesting pivoted\n        // columns inside copies of their header groups. For now,\n        // that seems like it would be (1) overkill on nesting, considering\n        // you already get nesting for every pivot level and (2)\n        // really hard. :)\n\n        return {\n          ...sourceColumn,\n          canPivot: false,\n          isPivoted: true,\n          parent,\n          depth: depth,\n          id: `${parent ? `${parent.id}.${sourceColumn.id}` : sourceColumn.id}`,\n          accessor: (originalRow, i, row) => {\n            if (pivotFilters.every(filter => filter(row))) {\n              return row.values[sourceColumn.id]\n            }\n          },\n        }\n      })\n    }\n\n    const uniqueValues = Array.from(pivotColumn.uniqueValues).sort()\n\n    return uniqueValues.map(uniqueValue => {\n      const columnGroup = {\n        ...pivotColumn,\n        Header:\n          pivotColumn.PivotHeader || typeof pivotColumn.header === 'string'\n            ? `${pivotColumn.Header}: ${uniqueValue}`\n            : uniqueValue,\n        isPivotGroup: true,\n        parent,\n        depth,\n        id: parent\n          ? `${parent.id}.${pivotColumn.id}.${uniqueValue}`\n          : `${pivotColumn.id}.${uniqueValue}`,\n        pivotValue: uniqueValue,\n      }\n\n      columnGroup.columns = buildPivotColumns(depth + 1, columnGroup, [\n        ...pivotFilters,\n        row => row.values[pivotColumn.id] === uniqueValue,\n      ])\n\n      return columnGroup\n    })\n  }\n\n  const newMaterialized = flattenColumns(buildPivotColumns())\n\n  return [...materialized, ...newMaterialized]\n}\n\nfunction materializedColumnsDeps(\n  deps,\n  {\n    instance: {\n      state: { pivotColumns, groupBy },\n    },\n  }\n) {\n  return [...deps, pivotColumns, groupBy]\n}\n\nfunction visibleColumns(visibleColumns, { instance: { state } }) {\n  visibleColumns = visibleColumns.filter(d => !d.isPivotSource)\n\n  if (state.pivotColumns.length && state.groupBy && state.groupBy.length) {\n    visibleColumns = visibleColumns.filter(\n      column => column.isGrouped || column.isPivoted\n    )\n  }\n\n  return visibleColumns\n}\n\nfunction visibleColumnsDeps(deps, { instance }) {\n  return [...deps, instance.state.pivotColumns, instance.state.groupBy]\n}\n\nfunction useInstance(instance) {\n  const {\n    columns,\n    allColumns,\n    flatHeaders,\n    // pivotFn = defaultPivotFn,\n    // manualPivot,\n    getHooks,\n    plugins,\n    dispatch,\n    autoResetPivot = true,\n    manaulPivot,\n    disablePivot,\n    defaultCanPivot,\n  } = instance\n\n  ensurePluginOrder(plugins, ['useGroupBy'], 'usePivotColumns')\n\n  const getInstance = useGetLatest(instance)\n\n  allColumns.forEach(column => {\n    const {\n      accessor,\n      defaultPivot: defaultColumnPivot,\n      disablePivot: columnDisablePivot,\n    } = column\n\n    column.canPivot = accessor\n      ? getFirstDefined(\n          column.canPivot,\n          columnDisablePivot === true ? false : undefined,\n          disablePivot === true ? false : undefined,\n          true\n        )\n      : getFirstDefined(\n          column.canPivot,\n          defaultColumnPivot,\n          defaultCanPivot,\n          false\n        )\n\n    if (column.canPivot) {\n      column.togglePivot = () => instance.togglePivot(column.id)\n    }\n\n    column.Aggregated = column.Aggregated || column.Cell\n  })\n\n  const togglePivot = (columnId, value) => {\n    dispatch({ type: actions.togglePivot, columnId, value })\n  }\n\n  flatHeaders.forEach(header => {\n    header.getPivotToggleProps = makePropGetter(\n      getHooks().getPivotToggleProps,\n      {\n        instance: getInstance(),\n        header,\n      }\n    )\n  })\n\n  const getAutoResetPivot = useGetLatest(autoResetPivot)\n\n  useMountedLayoutEffect(() => {\n    if (getAutoResetPivot()) {\n      dispatch({ type: actions.resetPivot })\n    }\n  }, [dispatch, manaulPivot ? null : columns])\n\n  Object.assign(instance, {\n    togglePivot,\n  })\n}\n\nfunction prepareRow(row) {\n  row.allCells.forEach(cell => {\n    // Grouped cells are in the pivotColumns and the pivot cell for the row\n    cell.isPivoted = cell.column.isPivoted\n  })\n}\n"]},"metadata":{},"sourceType":"module"}