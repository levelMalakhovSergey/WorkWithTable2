{"ast":null,"code":"export function useGridLayout(hooks) {\n  hooks.stateReducers.push(reducer);\n  hooks.getTableProps.push(getTableProps);\n  hooks.getHeaderProps.push(getHeaderProps);\n}\nuseGridLayout.pluginName = 'useGridLayout';\n\nconst getTableProps = (props, _ref) => {\n  let {\n    instance\n  } = _ref;\n  return [props, {\n    style: {\n      display: `grid`,\n      gridTemplateColumns: instance.state.gridLayout.columnWidths.map(w => w).join(` `)\n    }\n  }];\n};\n\nconst getHeaderProps = (props, _ref2) => {\n  let {\n    column\n  } = _ref2;\n  return [props, {\n    id: `header-cell-${column.id}`,\n    style: {\n      position: `sticky` //enables a scroll wrapper to be placed around the table and have sticky headers\n\n    }\n  }];\n};\n\nfunction reducer(state, action, previousState, instance) {\n  if (action.type === `init`) {\n    return {\n      gridLayout: {\n        columnWidths: instance.columns.map(() => `auto`)\n      },\n      ...state\n    };\n  }\n\n  if (action.type === `columnStartResizing`) {\n    const {\n      columnId\n    } = action;\n    const columnIndex = instance.visibleColumns.findIndex(col => col.id === columnId);\n    const elWidth = getElementWidth(columnId);\n\n    if (elWidth !== undefined) {\n      return { ...state,\n        gridLayout: { ...state.gridLayout,\n          columnId,\n          columnIndex,\n          startingWidth: elWidth\n        }\n      };\n    } else {\n      return state;\n    }\n  }\n\n  if (action.type === `columnResizing`) {\n    const {\n      columnIndex,\n      startingWidth,\n      columnWidths\n    } = state.gridLayout;\n    const change = state.columnResizing.startX - action.clientX;\n    const newWidth = startingWidth - change;\n    const columnWidthsCopy = [...columnWidths];\n    columnWidthsCopy[columnIndex] = `${newWidth}px`;\n    return { ...state,\n      gridLayout: { ...state.gridLayout,\n        columnWidths: columnWidthsCopy\n      }\n    };\n  }\n}\n\nfunction getElementWidth(columnId) {\n  const width = document.getElementById(`header-cell-${columnId}`)?.offsetWidth;\n\n  if (width !== undefined) {\n    return width;\n  }\n}","map":{"version":3,"sources":["C:/Projects/TableSite/tablesite2/node_modules/react-table/src/plugin-hooks/useGridLayout.js"],"names":["useGridLayout","hooks","stateReducers","push","reducer","getTableProps","getHeaderProps","pluginName","props","instance","style","display","gridTemplateColumns","state","gridLayout","columnWidths","map","w","join","column","id","position","action","previousState","type","columns","columnId","columnIndex","visibleColumns","findIndex","col","elWidth","getElementWidth","undefined","startingWidth","change","columnResizing","startX","clientX","newWidth","columnWidthsCopy","width","document","getElementById","offsetWidth"],"mappings":"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","sourcesContent":["export function useGridLayout(hooks) {\n  hooks.stateReducers.push(reducer)\n  hooks.getTableProps.push(getTableProps)\n  hooks.getHeaderProps.push(getHeaderProps)\n}\n\nuseGridLayout.pluginName = 'useGridLayout'\n\nconst getTableProps = (props, { instance }) => [\n  props,\n  {\n    style: {\n      display: `grid`,\n      gridTemplateColumns: instance.state.gridLayout.columnWidths.map(w => w).join(` `),\n    },\n  },\n]\n\nconst getHeaderProps = (props, { column }) => [\n  props,\n  {\n    id: `header-cell-${column.id}`,\n    style: {\n      position: `sticky` //enables a scroll wrapper to be placed around the table and have sticky headers\n    },\n  },\n]\n\nfunction reducer(state, action, previousState, instance) {\n  if (action.type === `init`) {\n    return {\n      gridLayout: {\n        columnWidths: instance.columns.map(() => `auto`),\n      },\n      ...state,\n    }\n  }\n\n  if (action.type === `columnStartResizing`) {\n    const { columnId } = action\n    const columnIndex = instance.visibleColumns.findIndex(col => col.id === columnId)\n    const elWidth = getElementWidth(columnId)\n\n    if (elWidth !== undefined) {\n      return {\n        ...state,\n        gridLayout: {\n          ...state.gridLayout,\n          columnId,\n          columnIndex,\n          startingWidth: elWidth\n        },\n      }\n    } else {\n      return state\n    }\n  }\n\n  if (action.type === `columnResizing`) {\n    const {\n      columnIndex,\n      startingWidth,\n      columnWidths,\n    } = state.gridLayout\n\n    const change = state.columnResizing.startX - action.clientX\n    const newWidth = startingWidth - change\n    const columnWidthsCopy = [...columnWidths]\n    columnWidthsCopy[columnIndex] = `${newWidth}px`\n\n    return {\n      ...state,\n      gridLayout: {\n        ...state.gridLayout,\n        columnWidths: columnWidthsCopy,\n      },\n    }\n  }\n}\n\nfunction getElementWidth(columnId) {\n  const width = document.getElementById(`header-cell-${columnId}`)?.offsetWidth\n\n  if (width !== undefined) {\n    return width\n  }\n}"]},"metadata":{},"sourceType":"module"}