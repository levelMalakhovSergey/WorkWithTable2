{"ast":null,"code":"import React from 'react';\nimport { functionalUpdate, actions } from '../publicUtils'; // Actions\n\nactions.resetColumnOrder = 'resetColumnOrder';\nactions.setColumnOrder = 'setColumnOrder';\nexport const useColumnOrder = hooks => {\n  hooks.stateReducers.push(reducer);\n  hooks.visibleColumnsDeps.push((deps, _ref) => {\n    let {\n      instance\n    } = _ref;\n    return [...deps, instance.state.columnOrder];\n  });\n  hooks.visibleColumns.push(visibleColumns);\n  hooks.useInstance.push(useInstance);\n};\nuseColumnOrder.pluginName = 'useColumnOrder';\n\nfunction reducer(state, action, previousState, instance) {\n  if (action.type === actions.init) {\n    return {\n      columnOrder: [],\n      ...state\n    };\n  }\n\n  if (action.type === actions.resetColumnOrder) {\n    return { ...state,\n      columnOrder: instance.initialState.columnOrder || []\n    };\n  }\n\n  if (action.type === actions.setColumnOrder) {\n    return { ...state,\n      columnOrder: functionalUpdate(action.columnOrder, state.columnOrder)\n    };\n  }\n}\n\nfunction visibleColumns(columns, _ref2) {\n  let {\n    instance: {\n      state: {\n        columnOrder\n      }\n    }\n  } = _ref2;\n\n  // If there is no order, return the normal columns\n  if (!columnOrder || !columnOrder.length) {\n    return columns;\n  }\n\n  const columnOrderCopy = [...columnOrder]; // If there is an order, make a copy of the columns\n\n  const columnsCopy = [...columns]; // And make a new ordered array of the columns\n\n  const columnsInOrder = []; // Loop over the columns and place them in order into the new array\n\n  while (columnsCopy.length && columnOrderCopy.length) {\n    const targetColumnId = columnOrderCopy.shift();\n    const foundIndex = columnsCopy.findIndex(d => d.id === targetColumnId);\n\n    if (foundIndex > -1) {\n      columnsInOrder.push(columnsCopy.splice(foundIndex, 1)[0]);\n    }\n  } // If there are any columns left, add them to the end\n\n\n  return [...columnsInOrder, ...columnsCopy];\n}\n\nfunction useInstance(instance) {\n  const {\n    dispatch\n  } = instance;\n  instance.setColumnOrder = React.useCallback(columnOrder => {\n    return dispatch({\n      type: actions.setColumnOrder,\n      columnOrder\n    });\n  }, [dispatch]);\n}","map":{"version":3,"sources":["C:/Projects/TableSite/tablesite2/node_modules/react-table/src/plugin-hooks/useColumnOrder.js"],"names":["React","functionalUpdate","actions","resetColumnOrder","setColumnOrder","useColumnOrder","hooks","stateReducers","push","reducer","visibleColumnsDeps","deps","instance","state","columnOrder","visibleColumns","useInstance","pluginName","action","previousState","type","init","initialState","columns","length","columnOrderCopy","columnsCopy","columnsInOrder","targetColumnId","shift","foundIndex","findIndex","d","id","splice","dispatch","useCallback"],"mappings":"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","sourcesContent":["import React from 'react'\n\nimport { functionalUpdate, actions } from '../publicUtils'\n\n// Actions\nactions.resetColumnOrder = 'resetColumnOrder'\nactions.setColumnOrder = 'setColumnOrder'\n\nexport const useColumnOrder = hooks => {\n  hooks.stateReducers.push(reducer)\n  hooks.visibleColumnsDeps.push((deps, { instance }) => {\n    return [...deps, instance.state.columnOrder]\n  })\n  hooks.visibleColumns.push(visibleColumns)\n  hooks.useInstance.push(useInstance)\n}\n\nuseColumnOrder.pluginName = 'useColumnOrder'\n\nfunction reducer(state, action, previousState, instance) {\n  if (action.type === actions.init) {\n    return {\n      columnOrder: [],\n      ...state,\n    }\n  }\n\n  if (action.type === actions.resetColumnOrder) {\n    return {\n      ...state,\n      columnOrder: instance.initialState.columnOrder || [],\n    }\n  }\n\n  if (action.type === actions.setColumnOrder) {\n    return {\n      ...state,\n      columnOrder: functionalUpdate(action.columnOrder, state.columnOrder),\n    }\n  }\n}\n\nfunction visibleColumns(\n  columns,\n  {\n    instance: {\n      state: { columnOrder },\n    },\n  }\n) {\n  // If there is no order, return the normal columns\n  if (!columnOrder || !columnOrder.length) {\n    return columns\n  }\n\n  const columnOrderCopy = [...columnOrder]\n\n  // If there is an order, make a copy of the columns\n  const columnsCopy = [...columns]\n\n  // And make a new ordered array of the columns\n  const columnsInOrder = []\n\n  // Loop over the columns and place them in order into the new array\n  while (columnsCopy.length && columnOrderCopy.length) {\n    const targetColumnId = columnOrderCopy.shift()\n    const foundIndex = columnsCopy.findIndex(d => d.id === targetColumnId)\n    if (foundIndex > -1) {\n      columnsInOrder.push(columnsCopy.splice(foundIndex, 1)[0])\n    }\n  }\n\n  // If there are any columns left, add them to the end\n  return [...columnsInOrder, ...columnsCopy]\n}\n\nfunction useInstance(instance) {\n  const { dispatch } = instance\n\n  instance.setColumnOrder = React.useCallback(\n    columnOrder => {\n      return dispatch({ type: actions.setColumnOrder, columnOrder })\n    },\n    [dispatch]\n  )\n}\n"]},"metadata":{},"sourceType":"module"}