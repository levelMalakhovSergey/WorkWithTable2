{"ast":null,"code":"import React from 'react';\nimport { actions, makePropGetter, ensurePluginOrder, useGetLatest, useMountedLayoutEffect } from '../publicUtils';\nconst pluginName = 'useRowSelect'; // Actions\n\nactions.resetSelectedRows = 'resetSelectedRows';\nactions.toggleAllRowsSelected = 'toggleAllRowsSelected';\nactions.toggleRowSelected = 'toggleRowSelected';\nactions.toggleAllPageRowsSelected = 'toggleAllPageRowsSelected';\nexport const useRowSelect = hooks => {\n  hooks.getToggleRowSelectedProps = [defaultGetToggleRowSelectedProps];\n  hooks.getToggleAllRowsSelectedProps = [defaultGetToggleAllRowsSelectedProps];\n  hooks.getToggleAllPageRowsSelectedProps = [defaultGetToggleAllPageRowsSelectedProps];\n  hooks.stateReducers.push(reducer);\n  hooks.useInstance.push(useInstance);\n  hooks.prepareRow.push(prepareRow);\n};\nuseRowSelect.pluginName = pluginName;\n\nconst defaultGetToggleRowSelectedProps = (props, _ref) => {\n  let {\n    instance,\n    row\n  } = _ref;\n  const {\n    manualRowSelectedKey = 'isSelected'\n  } = instance;\n  let checked = false;\n\n  if (row.original && row.original[manualRowSelectedKey]) {\n    checked = true;\n  } else {\n    checked = row.isSelected;\n  }\n\n  return [props, {\n    onChange: e => {\n      row.toggleRowSelected(e.target.checked);\n    },\n    style: {\n      cursor: 'pointer'\n    },\n    checked,\n    title: 'Toggle Row Selected',\n    indeterminate: row.isSomeSelected\n  }];\n};\n\nconst defaultGetToggleAllRowsSelectedProps = (props, _ref2) => {\n  let {\n    instance\n  } = _ref2;\n  return [props, {\n    onChange: e => {\n      instance.toggleAllRowsSelected(e.target.checked);\n    },\n    style: {\n      cursor: 'pointer'\n    },\n    checked: instance.isAllRowsSelected,\n    title: 'Toggle All Rows Selected',\n    indeterminate: Boolean(!instance.isAllRowsSelected && Object.keys(instance.state.selectedRowIds).length)\n  }];\n};\n\nconst defaultGetToggleAllPageRowsSelectedProps = (props, _ref3) => {\n  let {\n    instance\n  } = _ref3;\n  return [props, {\n    onChange(e) {\n      instance.toggleAllPageRowsSelected(e.target.checked);\n    },\n\n    style: {\n      cursor: 'pointer'\n    },\n    checked: instance.isAllPageRowsSelected,\n    title: 'Toggle All Current Page Rows Selected',\n    indeterminate: Boolean(!instance.isAllPageRowsSelected && instance.page.some(_ref4 => {\n      let {\n        id\n      } = _ref4;\n      return instance.state.selectedRowIds[id];\n    }))\n  }];\n}; // eslint-disable-next-line max-params\n\n\nfunction reducer(state, action, previousState, instance) {\n  if (action.type === actions.init) {\n    return {\n      selectedRowIds: {},\n      ...state\n    };\n  }\n\n  if (action.type === actions.resetSelectedRows) {\n    return { ...state,\n      selectedRowIds: instance.initialState.selectedRowIds || {}\n    };\n  }\n\n  if (action.type === actions.toggleAllRowsSelected) {\n    const {\n      value: setSelected\n    } = action;\n    const {\n      isAllRowsSelected,\n      rowsById,\n      nonGroupedRowsById = rowsById\n    } = instance;\n    const selectAll = typeof setSelected !== 'undefined' ? setSelected : !isAllRowsSelected; // Only remove/add the rows that are visible on the screen\n    //  Leave all the other rows that are selected alone.\n\n    const selectedRowIds = Object.assign({}, state.selectedRowIds);\n\n    if (selectAll) {\n      Object.keys(nonGroupedRowsById).forEach(rowId => {\n        selectedRowIds[rowId] = true;\n      });\n    } else {\n      Object.keys(nonGroupedRowsById).forEach(rowId => {\n        delete selectedRowIds[rowId];\n      });\n    }\n\n    return { ...state,\n      selectedRowIds\n    };\n  }\n\n  if (action.type === actions.toggleRowSelected) {\n    const {\n      id,\n      value: setSelected\n    } = action;\n    const {\n      rowsById,\n      selectSubRows = true,\n      getSubRows\n    } = instance;\n    const isSelected = state.selectedRowIds[id];\n    const shouldExist = typeof setSelected !== 'undefined' ? setSelected : !isSelected;\n\n    if (isSelected === shouldExist) {\n      return state;\n    }\n\n    const newSelectedRowIds = { ...state.selectedRowIds\n    };\n\n    const handleRowById = id => {\n      const row = rowsById[id];\n\n      if (!row.isGrouped) {\n        if (shouldExist) {\n          newSelectedRowIds[id] = true;\n        } else {\n          delete newSelectedRowIds[id];\n        }\n      }\n\n      if (selectSubRows && getSubRows(row)) {\n        return getSubRows(row).forEach(row => handleRowById(row.id));\n      }\n    };\n\n    handleRowById(id);\n    return { ...state,\n      selectedRowIds: newSelectedRowIds\n    };\n  }\n\n  if (action.type === actions.toggleAllPageRowsSelected) {\n    const {\n      value: setSelected\n    } = action;\n    const {\n      page,\n      rowsById,\n      selectSubRows = true,\n      isAllPageRowsSelected,\n      getSubRows\n    } = instance;\n    const selectAll = typeof setSelected !== 'undefined' ? setSelected : !isAllPageRowsSelected;\n    const newSelectedRowIds = { ...state.selectedRowIds\n    };\n\n    const handleRowById = id => {\n      const row = rowsById[id];\n\n      if (!row.isGrouped) {\n        if (selectAll) {\n          newSelectedRowIds[id] = true;\n        } else {\n          delete newSelectedRowIds[id];\n        }\n      }\n\n      if (selectSubRows && getSubRows(row)) {\n        return getSubRows(row).forEach(row => handleRowById(row.id));\n      }\n    };\n\n    page.forEach(row => handleRowById(row.id));\n    return { ...state,\n      selectedRowIds: newSelectedRowIds\n    };\n  }\n\n  return state;\n}\n\nfunction useInstance(instance) {\n  const {\n    data,\n    rows,\n    getHooks,\n    plugins,\n    rowsById,\n    nonGroupedRowsById = rowsById,\n    autoResetSelectedRows = true,\n    state: {\n      selectedRowIds\n    },\n    selectSubRows = true,\n    dispatch,\n    page,\n    getSubRows\n  } = instance;\n  ensurePluginOrder(plugins, ['useFilters', 'useGroupBy', 'useSortBy', 'useExpanded', 'usePagination'], 'useRowSelect');\n  const selectedFlatRows = React.useMemo(() => {\n    const selectedFlatRows = [];\n    rows.forEach(row => {\n      const isSelected = selectSubRows ? getRowIsSelected(row, selectedRowIds, getSubRows) : !!selectedRowIds[row.id];\n      row.isSelected = !!isSelected;\n      row.isSomeSelected = isSelected === null;\n\n      if (isSelected) {\n        selectedFlatRows.push(row);\n      }\n    });\n    return selectedFlatRows;\n  }, [rows, selectSubRows, selectedRowIds, getSubRows]);\n  let isAllRowsSelected = Boolean(Object.keys(nonGroupedRowsById).length && Object.keys(selectedRowIds).length);\n  let isAllPageRowsSelected = isAllRowsSelected;\n\n  if (isAllRowsSelected) {\n    if (Object.keys(nonGroupedRowsById).some(id => !selectedRowIds[id])) {\n      isAllRowsSelected = false;\n    }\n  }\n\n  if (!isAllRowsSelected) {\n    if (page && page.length && page.some(_ref5 => {\n      let {\n        id\n      } = _ref5;\n      return !selectedRowIds[id];\n    })) {\n      isAllPageRowsSelected = false;\n    }\n  }\n\n  const getAutoResetSelectedRows = useGetLatest(autoResetSelectedRows);\n  useMountedLayoutEffect(() => {\n    if (getAutoResetSelectedRows()) {\n      dispatch({\n        type: actions.resetSelectedRows\n      });\n    }\n  }, [dispatch, data]);\n  const toggleAllRowsSelected = React.useCallback(value => dispatch({\n    type: actions.toggleAllRowsSelected,\n    value\n  }), [dispatch]);\n  const toggleAllPageRowsSelected = React.useCallback(value => dispatch({\n    type: actions.toggleAllPageRowsSelected,\n    value\n  }), [dispatch]);\n  const toggleRowSelected = React.useCallback((id, value) => dispatch({\n    type: actions.toggleRowSelected,\n    id,\n    value\n  }), [dispatch]);\n  const getInstance = useGetLatest(instance);\n  const getToggleAllRowsSelectedProps = makePropGetter(getHooks().getToggleAllRowsSelectedProps, {\n    instance: getInstance()\n  });\n  const getToggleAllPageRowsSelectedProps = makePropGetter(getHooks().getToggleAllPageRowsSelectedProps, {\n    instance: getInstance()\n  });\n  Object.assign(instance, {\n    selectedFlatRows,\n    isAllRowsSelected,\n    isAllPageRowsSelected,\n    toggleRowSelected,\n    toggleAllRowsSelected,\n    getToggleAllRowsSelectedProps,\n    getToggleAllPageRowsSelectedProps,\n    toggleAllPageRowsSelected\n  });\n}\n\nfunction prepareRow(row, _ref6) {\n  let {\n    instance\n  } = _ref6;\n\n  row.toggleRowSelected = set => instance.toggleRowSelected(row.id, set);\n\n  row.getToggleRowSelectedProps = makePropGetter(instance.getHooks().getToggleRowSelectedProps, {\n    instance: instance,\n    row\n  });\n}\n\nfunction getRowIsSelected(row, selectedRowIds, getSubRows) {\n  if (selectedRowIds[row.id]) {\n    return true;\n  }\n\n  const subRows = getSubRows(row);\n\n  if (subRows && subRows.length) {\n    let allChildrenSelected = true;\n    let someSelected = false;\n    subRows.forEach(subRow => {\n      // Bail out early if we know both of these\n      if (someSelected && !allChildrenSelected) {\n        return;\n      }\n\n      if (getRowIsSelected(subRow, selectedRowIds, getSubRows)) {\n        someSelected = true;\n      } else {\n        allChildrenSelected = false;\n      }\n    });\n    return allChildrenSelected ? true : someSelected ? null : false;\n  }\n\n  return false;\n}","map":{"version":3,"sources":["C:/Projects/TableSite/tablesite2/node_modules/react-table/src/plugin-hooks/useRowSelect.js"],"names":["React","actions","makePropGetter","ensurePluginOrder","useGetLatest","useMountedLayoutEffect","pluginName","resetSelectedRows","toggleAllRowsSelected","toggleRowSelected","toggleAllPageRowsSelected","useRowSelect","hooks","getToggleRowSelectedProps","defaultGetToggleRowSelectedProps","getToggleAllRowsSelectedProps","defaultGetToggleAllRowsSelectedProps","getToggleAllPageRowsSelectedProps","defaultGetToggleAllPageRowsSelectedProps","stateReducers","push","reducer","useInstance","prepareRow","props","instance","row","manualRowSelectedKey","checked","original","isSelected","onChange","e","target","style","cursor","title","indeterminate","isSomeSelected","isAllRowsSelected","Boolean","Object","keys","state","selectedRowIds","length","isAllPageRowsSelected","page","some","id","action","previousState","type","init","initialState","value","setSelected","rowsById","nonGroupedRowsById","selectAll","assign","forEach","rowId","selectSubRows","getSubRows","shouldExist","newSelectedRowIds","handleRowById","isGrouped","data","rows","getHooks","plugins","autoResetSelectedRows","dispatch","selectedFlatRows","useMemo","getRowIsSelected","getAutoResetSelectedRows","useCallback","getInstance","set","subRows","allChildrenSelected","someSelected","subRow"],"mappings":"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","sourcesContent":["import React from 'react'\n\nimport {\n  actions,\n  makePropGetter,\n  ensurePluginOrder,\n  useGetLatest,\n  useMountedLayoutEffect,\n} from '../publicUtils'\n\nconst pluginName = 'useRowSelect'\n\n// Actions\nactions.resetSelectedRows = 'resetSelectedRows'\nactions.toggleAllRowsSelected = 'toggleAllRowsSelected'\nactions.toggleRowSelected = 'toggleRowSelected'\nactions.toggleAllPageRowsSelected = 'toggleAllPageRowsSelected'\n\nexport const useRowSelect = hooks => {\n  hooks.getToggleRowSelectedProps = [defaultGetToggleRowSelectedProps]\n  hooks.getToggleAllRowsSelectedProps = [defaultGetToggleAllRowsSelectedProps]\n  hooks.getToggleAllPageRowsSelectedProps = [\n    defaultGetToggleAllPageRowsSelectedProps,\n  ]\n  hooks.stateReducers.push(reducer)\n  hooks.useInstance.push(useInstance)\n  hooks.prepareRow.push(prepareRow)\n}\n\nuseRowSelect.pluginName = pluginName\n\nconst defaultGetToggleRowSelectedProps = (props, { instance, row }) => {\n  const { manualRowSelectedKey = 'isSelected' } = instance\n  let checked = false\n\n  if (row.original && row.original[manualRowSelectedKey]) {\n    checked = true\n  } else {\n    checked = row.isSelected\n  }\n\n  return [\n    props,\n    {\n      onChange: e => {\n        row.toggleRowSelected(e.target.checked)\n      },\n      style: {\n        cursor: 'pointer',\n      },\n      checked,\n      title: 'Toggle Row Selected',\n      indeterminate: row.isSomeSelected,\n    },\n  ]\n}\n\nconst defaultGetToggleAllRowsSelectedProps = (props, { instance }) => [\n  props,\n  {\n    onChange: e => {\n      instance.toggleAllRowsSelected(e.target.checked)\n    },\n    style: {\n      cursor: 'pointer',\n    },\n    checked: instance.isAllRowsSelected,\n    title: 'Toggle All Rows Selected',\n    indeterminate: Boolean(\n      !instance.isAllRowsSelected &&\n        Object.keys(instance.state.selectedRowIds).length\n    ),\n  },\n]\n\nconst defaultGetToggleAllPageRowsSelectedProps = (props, { instance }) => [\n  props,\n  {\n    onChange(e) {\n      instance.toggleAllPageRowsSelected(e.target.checked)\n    },\n    style: {\n      cursor: 'pointer',\n    },\n    checked: instance.isAllPageRowsSelected,\n    title: 'Toggle All Current Page Rows Selected',\n    indeterminate: Boolean(\n      !instance.isAllPageRowsSelected &&\n        instance.page.some(({ id }) => instance.state.selectedRowIds[id])\n    ),\n  },\n]\n\n// eslint-disable-next-line max-params\nfunction reducer(state, action, previousState, instance) {\n  if (action.type === actions.init) {\n    return {\n      selectedRowIds: {},\n      ...state,\n    }\n  }\n\n  if (action.type === actions.resetSelectedRows) {\n    return {\n      ...state,\n      selectedRowIds: instance.initialState.selectedRowIds || {},\n    }\n  }\n\n  if (action.type === actions.toggleAllRowsSelected) {\n    const { value: setSelected } = action\n    const {\n      isAllRowsSelected,\n      rowsById,\n      nonGroupedRowsById = rowsById,\n    } = instance\n\n    const selectAll =\n      typeof setSelected !== 'undefined' ? setSelected : !isAllRowsSelected\n\n    // Only remove/add the rows that are visible on the screen\n    //  Leave all the other rows that are selected alone.\n    const selectedRowIds = Object.assign({}, state.selectedRowIds)\n\n    if (selectAll) {\n      Object.keys(nonGroupedRowsById).forEach(rowId => {\n        selectedRowIds[rowId] = true\n      })\n    } else {\n      Object.keys(nonGroupedRowsById).forEach(rowId => {\n        delete selectedRowIds[rowId]\n      })\n    }\n\n    return {\n      ...state,\n      selectedRowIds,\n    }\n  }\n\n  if (action.type === actions.toggleRowSelected) {\n    const { id, value: setSelected } = action\n    const { rowsById, selectSubRows = true, getSubRows } = instance\n    const isSelected = state.selectedRowIds[id]\n    const shouldExist =\n      typeof setSelected !== 'undefined' ? setSelected : !isSelected\n\n    if (isSelected === shouldExist) {\n      return state\n    }\n\n    const newSelectedRowIds = { ...state.selectedRowIds }\n\n    const handleRowById = id => {\n      const row = rowsById[id]\n\n      if (!row.isGrouped) {\n        if (shouldExist) {\n          newSelectedRowIds[id] = true\n        } else {\n          delete newSelectedRowIds[id]\n        }\n      }\n\n      if (selectSubRows && getSubRows(row)) {\n        return getSubRows(row).forEach(row => handleRowById(row.id))\n      }\n    }\n\n    handleRowById(id)\n\n    return {\n      ...state,\n      selectedRowIds: newSelectedRowIds,\n    }\n  }\n\n  if (action.type === actions.toggleAllPageRowsSelected) {\n    const { value: setSelected } = action\n    const {\n      page,\n      rowsById,\n      selectSubRows = true,\n      isAllPageRowsSelected,\n      getSubRows,\n    } = instance\n\n    const selectAll =\n      typeof setSelected !== 'undefined' ? setSelected : !isAllPageRowsSelected\n\n    const newSelectedRowIds = { ...state.selectedRowIds }\n\n    const handleRowById = id => {\n      const row = rowsById[id]\n\n      if (!row.isGrouped) {\n        if (selectAll) {\n          newSelectedRowIds[id] = true\n        } else {\n          delete newSelectedRowIds[id]\n        }\n      }\n\n      if (selectSubRows && getSubRows(row)) {\n        return getSubRows(row).forEach(row => handleRowById(row.id))\n      }\n    }\n\n    page.forEach(row => handleRowById(row.id))\n\n    return {\n      ...state,\n      selectedRowIds: newSelectedRowIds,\n    }\n  }\n  return state\n}\n\nfunction useInstance(instance) {\n  const {\n    data,\n    rows,\n    getHooks,\n    plugins,\n    rowsById,\n    nonGroupedRowsById = rowsById,\n    autoResetSelectedRows = true,\n    state: { selectedRowIds },\n    selectSubRows = true,\n    dispatch,\n    page,\n    getSubRows,\n  } = instance\n\n  ensurePluginOrder(\n    plugins,\n    ['useFilters', 'useGroupBy', 'useSortBy', 'useExpanded', 'usePagination'],\n    'useRowSelect'\n  )\n\n  const selectedFlatRows = React.useMemo(() => {\n    const selectedFlatRows = []\n\n    rows.forEach(row => {\n      const isSelected = selectSubRows\n        ? getRowIsSelected(row, selectedRowIds, getSubRows)\n        : !!selectedRowIds[row.id]\n      row.isSelected = !!isSelected\n      row.isSomeSelected = isSelected === null\n\n      if (isSelected) {\n        selectedFlatRows.push(row)\n      }\n    })\n\n    return selectedFlatRows\n  }, [rows, selectSubRows, selectedRowIds, getSubRows])\n\n  let isAllRowsSelected = Boolean(\n    Object.keys(nonGroupedRowsById).length && Object.keys(selectedRowIds).length\n  )\n\n  let isAllPageRowsSelected = isAllRowsSelected\n\n  if (isAllRowsSelected) {\n    if (Object.keys(nonGroupedRowsById).some(id => !selectedRowIds[id])) {\n      isAllRowsSelected = false\n    }\n  }\n\n  if (!isAllRowsSelected) {\n    if (page && page.length && page.some(({ id }) => !selectedRowIds[id])) {\n      isAllPageRowsSelected = false\n    }\n  }\n\n  const getAutoResetSelectedRows = useGetLatest(autoResetSelectedRows)\n\n  useMountedLayoutEffect(() => {\n    if (getAutoResetSelectedRows()) {\n      dispatch({ type: actions.resetSelectedRows })\n    }\n  }, [dispatch, data])\n\n  const toggleAllRowsSelected = React.useCallback(\n    value => dispatch({ type: actions.toggleAllRowsSelected, value }),\n    [dispatch]\n  )\n\n  const toggleAllPageRowsSelected = React.useCallback(\n    value => dispatch({ type: actions.toggleAllPageRowsSelected, value }),\n    [dispatch]\n  )\n\n  const toggleRowSelected = React.useCallback(\n    (id, value) => dispatch({ type: actions.toggleRowSelected, id, value }),\n    [dispatch]\n  )\n\n  const getInstance = useGetLatest(instance)\n\n  const getToggleAllRowsSelectedProps = makePropGetter(\n    getHooks().getToggleAllRowsSelectedProps,\n    { instance: getInstance() }\n  )\n\n  const getToggleAllPageRowsSelectedProps = makePropGetter(\n    getHooks().getToggleAllPageRowsSelectedProps,\n    { instance: getInstance() }\n  )\n\n  Object.assign(instance, {\n    selectedFlatRows,\n    isAllRowsSelected,\n    isAllPageRowsSelected,\n    toggleRowSelected,\n    toggleAllRowsSelected,\n    getToggleAllRowsSelectedProps,\n    getToggleAllPageRowsSelectedProps,\n    toggleAllPageRowsSelected,\n  })\n}\n\nfunction prepareRow(row, { instance }) {\n  row.toggleRowSelected = set => instance.toggleRowSelected(row.id, set)\n\n  row.getToggleRowSelectedProps = makePropGetter(\n    instance.getHooks().getToggleRowSelectedProps,\n    { instance: instance, row }\n  )\n}\n\nfunction getRowIsSelected(row, selectedRowIds, getSubRows) {\n  if (selectedRowIds[row.id]) {\n    return true\n  }\n\n  const subRows = getSubRows(row)\n\n  if (subRows && subRows.length) {\n    let allChildrenSelected = true\n    let someSelected = false\n\n    subRows.forEach(subRow => {\n      // Bail out early if we know both of these\n      if (someSelected && !allChildrenSelected) {\n        return\n      }\n\n      if (getRowIsSelected(subRow, selectedRowIds, getSubRows)) {\n        someSelected = true\n      } else {\n        allChildrenSelected = false\n      }\n    })\n    return allChildrenSelected ? true : someSelected ? null : false\n  }\n\n  return false\n}\n"]},"metadata":{},"sourceType":"module"}