{"ast":null,"code":"import React from 'react';\nimport { getFilterMethod, shouldAutoRemoveFilter, getFirstDefined } from '../utils';\nimport { actions, useMountedLayoutEffect, functionalUpdate, useGetLatest } from '../publicUtils';\nimport * as filterTypes from '../filterTypes'; // Actions\n\nactions.resetGlobalFilter = 'resetGlobalFilter';\nactions.setGlobalFilter = 'setGlobalFilter';\nexport const useGlobalFilter = hooks => {\n  hooks.stateReducers.push(reducer);\n  hooks.useInstance.push(useInstance);\n};\nuseGlobalFilter.pluginName = 'useGlobalFilter';\n\nfunction reducer(state, action, previousState, instance) {\n  if (action.type === actions.resetGlobalFilter) {\n    return { ...state,\n      globalFilter: instance.initialState.globalFilter || undefined\n    };\n  }\n\n  if (action.type === actions.setGlobalFilter) {\n    const {\n      filterValue\n    } = action;\n    const {\n      userFilterTypes\n    } = instance;\n    const filterMethod = getFilterMethod(instance.globalFilter, userFilterTypes || {}, filterTypes);\n    const newFilter = functionalUpdate(filterValue, state.globalFilter); //\n\n    if (shouldAutoRemoveFilter(filterMethod.autoRemove, newFilter)) {\n      const {\n        globalFilter,\n        ...stateWithoutGlobalFilter\n      } = state;\n      return stateWithoutGlobalFilter;\n    }\n\n    return { ...state,\n      globalFilter: newFilter\n    };\n  }\n}\n\nfunction useInstance(instance) {\n  const {\n    data,\n    rows,\n    flatRows,\n    rowsById,\n    allColumns,\n    filterTypes: userFilterTypes,\n    globalFilter,\n    manualGlobalFilter,\n    state: {\n      globalFilter: globalFilterValue\n    },\n    dispatch,\n    autoResetGlobalFilter = true,\n    disableGlobalFilter\n  } = instance;\n  const setGlobalFilter = React.useCallback(filterValue => {\n    dispatch({\n      type: actions.setGlobalFilter,\n      filterValue\n    });\n  }, [dispatch]); // TODO: Create a filter cache for incremental high speed multi-filtering\n  // This gets pretty complicated pretty fast, since you have to maintain a\n  // cache for each row group (top-level rows, and each row's recursive subrows)\n  // This would make multi-filtering a lot faster though. Too far?\n\n  const [globalFilteredRows, globalFilteredFlatRows, globalFilteredRowsById] = React.useMemo(() => {\n    if (manualGlobalFilter || typeof globalFilterValue === 'undefined') {\n      return [rows, flatRows, rowsById];\n    }\n\n    const filteredFlatRows = [];\n    const filteredRowsById = {};\n    const filterMethod = getFilterMethod(globalFilter, userFilterTypes || {}, filterTypes);\n\n    if (!filterMethod) {\n      console.warn(`Could not find a valid 'globalFilter' option.`);\n      return rows;\n    }\n\n    allColumns.forEach(column => {\n      const {\n        disableGlobalFilter: columnDisableGlobalFilter\n      } = column;\n      column.canFilter = getFirstDefined(columnDisableGlobalFilter === true ? false : undefined, disableGlobalFilter === true ? false : undefined, true);\n    });\n    const filterableColumns = allColumns.filter(c => c.canFilter === true); // Filters top level and nested rows\n\n    const filterRows = filteredRows => {\n      filteredRows = filterMethod(filteredRows, filterableColumns.map(d => d.id), globalFilterValue);\n      filteredRows.forEach(row => {\n        filteredFlatRows.push(row);\n        filteredRowsById[row.id] = row;\n        row.subRows = row.subRows && row.subRows.length ? filterRows(row.subRows) : row.subRows;\n      });\n      return filteredRows;\n    };\n\n    return [filterRows(rows), filteredFlatRows, filteredRowsById];\n  }, [manualGlobalFilter, globalFilterValue, globalFilter, userFilterTypes, allColumns, rows, flatRows, rowsById, disableGlobalFilter]);\n  const getAutoResetGlobalFilter = useGetLatest(autoResetGlobalFilter);\n  useMountedLayoutEffect(() => {\n    if (getAutoResetGlobalFilter()) {\n      dispatch({\n        type: actions.resetGlobalFilter\n      });\n    }\n  }, [dispatch, manualGlobalFilter ? null : data]);\n  Object.assign(instance, {\n    preGlobalFilteredRows: rows,\n    preGlobalFilteredFlatRows: flatRows,\n    preGlobalFilteredRowsById: rowsById,\n    globalFilteredRows,\n    globalFilteredFlatRows,\n    globalFilteredRowsById,\n    rows: globalFilteredRows,\n    flatRows: globalFilteredFlatRows,\n    rowsById: globalFilteredRowsById,\n    setGlobalFilter,\n    disableGlobalFilter\n  });\n}","map":{"version":3,"sources":["C:/Projects/TableSite/tablesite2/node_modules/react-table/src/plugin-hooks/useGlobalFilter.js"],"names":["React","getFilterMethod","shouldAutoRemoveFilter","getFirstDefined","actions","useMountedLayoutEffect","functionalUpdate","useGetLatest","filterTypes","resetGlobalFilter","setGlobalFilter","useGlobalFilter","hooks","stateReducers","push","reducer","useInstance","pluginName","state","action","previousState","instance","type","globalFilter","initialState","undefined","filterValue","userFilterTypes","filterMethod","newFilter","autoRemove","stateWithoutGlobalFilter","data","rows","flatRows","rowsById","allColumns","manualGlobalFilter","globalFilterValue","dispatch","autoResetGlobalFilter","disableGlobalFilter","useCallback","globalFilteredRows","globalFilteredFlatRows","globalFilteredRowsById","useMemo","filteredFlatRows","filteredRowsById","console","warn","forEach","column","columnDisableGlobalFilter","canFilter","filterableColumns","filter","c","filterRows","filteredRows","map","d","id","row","subRows","length","getAutoResetGlobalFilter","Object","assign","preGlobalFilteredRows","preGlobalFilteredFlatRows","preGlobalFilteredRowsById"],"mappings":"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","sourcesContent":["import React from 'react'\n\nimport {\n  getFilterMethod,\n  shouldAutoRemoveFilter,\n  getFirstDefined,\n} from '../utils'\n\nimport {\n  actions,\n  useMountedLayoutEffect,\n  functionalUpdate,\n  useGetLatest,\n} from '../publicUtils'\n\nimport * as filterTypes from '../filterTypes'\n\n// Actions\nactions.resetGlobalFilter = 'resetGlobalFilter'\nactions.setGlobalFilter = 'setGlobalFilter'\n\nexport const useGlobalFilter = hooks => {\n  hooks.stateReducers.push(reducer)\n  hooks.useInstance.push(useInstance)\n}\n\nuseGlobalFilter.pluginName = 'useGlobalFilter'\n\nfunction reducer(state, action, previousState, instance) {\n  if (action.type === actions.resetGlobalFilter) {\n    return {\n      ...state,\n      globalFilter: instance.initialState.globalFilter || undefined,\n    }\n  }\n\n  if (action.type === actions.setGlobalFilter) {\n    const { filterValue } = action\n    const { userFilterTypes } = instance\n\n    const filterMethod = getFilterMethod(\n      instance.globalFilter,\n      userFilterTypes || {},\n      filterTypes\n    )\n\n    const newFilter = functionalUpdate(filterValue, state.globalFilter)\n\n    //\n    if (shouldAutoRemoveFilter(filterMethod.autoRemove, newFilter)) {\n      const { globalFilter, ...stateWithoutGlobalFilter } = state\n      return stateWithoutGlobalFilter\n    }\n\n    return {\n      ...state,\n      globalFilter: newFilter,\n    }\n  }\n}\n\nfunction useInstance(instance) {\n  const {\n    data,\n    rows,\n    flatRows,\n    rowsById,\n    allColumns,\n    filterTypes: userFilterTypes,\n    globalFilter,\n    manualGlobalFilter,\n    state: { globalFilter: globalFilterValue },\n    dispatch,\n    autoResetGlobalFilter = true,\n    disableGlobalFilter,\n  } = instance\n\n  const setGlobalFilter = React.useCallback(\n    filterValue => {\n      dispatch({ type: actions.setGlobalFilter, filterValue })\n    },\n    [dispatch]\n  )\n\n  // TODO: Create a filter cache for incremental high speed multi-filtering\n  // This gets pretty complicated pretty fast, since you have to maintain a\n  // cache for each row group (top-level rows, and each row's recursive subrows)\n  // This would make multi-filtering a lot faster though. Too far?\n\n  const [\n    globalFilteredRows,\n    globalFilteredFlatRows,\n    globalFilteredRowsById,\n  ] = React.useMemo(() => {\n    if (manualGlobalFilter || typeof globalFilterValue === 'undefined') {\n      return [rows, flatRows, rowsById]\n    }\n\n    const filteredFlatRows = []\n    const filteredRowsById = {}\n\n    const filterMethod = getFilterMethod(\n      globalFilter,\n      userFilterTypes || {},\n      filterTypes\n    )\n\n    if (!filterMethod) {\n      console.warn(`Could not find a valid 'globalFilter' option.`)\n      return rows\n    }\n\n    allColumns.forEach(column => {\n      const { disableGlobalFilter: columnDisableGlobalFilter } = column\n\n      column.canFilter = getFirstDefined(\n        columnDisableGlobalFilter === true ? false : undefined,\n        disableGlobalFilter === true ? false : undefined,\n        true\n      )\n    })\n\n    const filterableColumns = allColumns.filter(c => c.canFilter === true)\n\n    // Filters top level and nested rows\n    const filterRows = filteredRows => {\n      filteredRows = filterMethod(\n        filteredRows,\n        filterableColumns.map(d => d.id),\n        globalFilterValue\n      )\n\n      filteredRows.forEach(row => {\n        filteredFlatRows.push(row)\n        filteredRowsById[row.id] = row\n\n        row.subRows =\n          row.subRows && row.subRows.length\n            ? filterRows(row.subRows)\n            : row.subRows\n      })\n\n      return filteredRows\n    }\n\n    return [filterRows(rows), filteredFlatRows, filteredRowsById]\n  }, [\n    manualGlobalFilter,\n    globalFilterValue,\n    globalFilter,\n    userFilterTypes,\n    allColumns,\n    rows,\n    flatRows,\n    rowsById,\n    disableGlobalFilter,\n  ])\n\n  const getAutoResetGlobalFilter = useGetLatest(autoResetGlobalFilter)\n\n  useMountedLayoutEffect(() => {\n    if (getAutoResetGlobalFilter()) {\n      dispatch({ type: actions.resetGlobalFilter })\n    }\n  }, [dispatch, manualGlobalFilter ? null : data])\n\n  Object.assign(instance, {\n    preGlobalFilteredRows: rows,\n    preGlobalFilteredFlatRows: flatRows,\n    preGlobalFilteredRowsById: rowsById,\n    globalFilteredRows,\n    globalFilteredFlatRows,\n    globalFilteredRowsById,\n    rows: globalFilteredRows,\n    flatRows: globalFilteredFlatRows,\n    rowsById: globalFilteredRowsById,\n    setGlobalFilter,\n    disableGlobalFilter,\n  })\n}\n"]},"metadata":{},"sourceType":"module"}