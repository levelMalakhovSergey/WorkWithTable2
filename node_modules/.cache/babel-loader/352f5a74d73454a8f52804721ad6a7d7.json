{"ast":null,"code":"import React from 'react';\nimport { actions, functionalUpdate, useGetLatest, makePropGetter, useMountedLayoutEffect } from '../publicUtils';\nactions.resetHiddenColumns = 'resetHiddenColumns';\nactions.toggleHideColumn = 'toggleHideColumn';\nactions.setHiddenColumns = 'setHiddenColumns';\nactions.toggleHideAllColumns = 'toggleHideAllColumns';\nexport const useColumnVisibility = hooks => {\n  hooks.getToggleHiddenProps = [defaultGetToggleHiddenProps];\n  hooks.getToggleHideAllColumnsProps = [defaultGetToggleHideAllColumnsProps];\n  hooks.stateReducers.push(reducer);\n  hooks.useInstanceBeforeDimensions.push(useInstanceBeforeDimensions);\n  hooks.headerGroupsDeps.push((deps, _ref) => {\n    let {\n      instance\n    } = _ref;\n    return [...deps, instance.state.hiddenColumns];\n  });\n  hooks.useInstance.push(useInstance);\n};\nuseColumnVisibility.pluginName = 'useColumnVisibility';\n\nconst defaultGetToggleHiddenProps = (props, _ref2) => {\n  let {\n    column\n  } = _ref2;\n  return [props, {\n    onChange: e => {\n      column.toggleHidden(!e.target.checked);\n    },\n    style: {\n      cursor: 'pointer'\n    },\n    checked: column.isVisible,\n    title: 'Toggle Column Visible'\n  }];\n};\n\nconst defaultGetToggleHideAllColumnsProps = (props, _ref3) => {\n  let {\n    instance\n  } = _ref3;\n  return [props, {\n    onChange: e => {\n      instance.toggleHideAllColumns(!e.target.checked);\n    },\n    style: {\n      cursor: 'pointer'\n    },\n    checked: !instance.allColumnsHidden && !instance.state.hiddenColumns.length,\n    title: 'Toggle All Columns Hidden',\n    indeterminate: !instance.allColumnsHidden && instance.state.hiddenColumns.length\n  }];\n};\n\nfunction reducer(state, action, previousState, instance) {\n  if (action.type === actions.init) {\n    return {\n      hiddenColumns: [],\n      ...state\n    };\n  }\n\n  if (action.type === actions.resetHiddenColumns) {\n    return { ...state,\n      hiddenColumns: instance.initialState.hiddenColumns || []\n    };\n  }\n\n  if (action.type === actions.toggleHideColumn) {\n    const should = typeof action.value !== 'undefined' ? action.value : !state.hiddenColumns.includes(action.columnId);\n    const hiddenColumns = should ? [...state.hiddenColumns, action.columnId] : state.hiddenColumns.filter(d => d !== action.columnId);\n    return { ...state,\n      hiddenColumns\n    };\n  }\n\n  if (action.type === actions.setHiddenColumns) {\n    return { ...state,\n      hiddenColumns: functionalUpdate(action.value, state.hiddenColumns)\n    };\n  }\n\n  if (action.type === actions.toggleHideAllColumns) {\n    const shouldAll = typeof action.value !== 'undefined' ? action.value : !state.hiddenColumns.length;\n    return { ...state,\n      hiddenColumns: shouldAll ? instance.allColumns.map(d => d.id) : []\n    };\n  }\n}\n\nfunction useInstanceBeforeDimensions(instance) {\n  const {\n    headers,\n    state: {\n      hiddenColumns\n    }\n  } = instance;\n  const isMountedRef = React.useRef(false);\n\n  if (!isMountedRef.current) {}\n\n  const handleColumn = (column, parentVisible) => {\n    column.isVisible = parentVisible && !hiddenColumns.includes(column.id);\n    let totalVisibleHeaderCount = 0;\n\n    if (column.headers && column.headers.length) {\n      column.headers.forEach(subColumn => totalVisibleHeaderCount += handleColumn(subColumn, column.isVisible));\n    } else {\n      totalVisibleHeaderCount = column.isVisible ? 1 : 0;\n    }\n\n    column.totalVisibleHeaderCount = totalVisibleHeaderCount;\n    return totalVisibleHeaderCount;\n  };\n\n  let totalVisibleHeaderCount = 0;\n  headers.forEach(subHeader => totalVisibleHeaderCount += handleColumn(subHeader, true));\n}\n\nfunction useInstance(instance) {\n  const {\n    columns,\n    flatHeaders,\n    dispatch,\n    allColumns,\n    getHooks,\n    state: {\n      hiddenColumns\n    },\n    autoResetHiddenColumns = true\n  } = instance;\n  const getInstance = useGetLatest(instance);\n  const allColumnsHidden = allColumns.length === hiddenColumns.length;\n  const toggleHideColumn = React.useCallback((columnId, value) => dispatch({\n    type: actions.toggleHideColumn,\n    columnId,\n    value\n  }), [dispatch]);\n  const setHiddenColumns = React.useCallback(value => dispatch({\n    type: actions.setHiddenColumns,\n    value\n  }), [dispatch]);\n  const toggleHideAllColumns = React.useCallback(value => dispatch({\n    type: actions.toggleHideAllColumns,\n    value\n  }), [dispatch]);\n  const getToggleHideAllColumnsProps = makePropGetter(getHooks().getToggleHideAllColumnsProps, {\n    instance: getInstance()\n  });\n  flatHeaders.forEach(column => {\n    column.toggleHidden = value => {\n      dispatch({\n        type: actions.toggleHideColumn,\n        columnId: column.id,\n        value\n      });\n    };\n\n    column.getToggleHiddenProps = makePropGetter(getHooks().getToggleHiddenProps, {\n      instance: getInstance(),\n      column\n    });\n  });\n  const getAutoResetHiddenColumns = useGetLatest(autoResetHiddenColumns);\n  useMountedLayoutEffect(() => {\n    if (getAutoResetHiddenColumns()) {\n      dispatch({\n        type: actions.resetHiddenColumns\n      });\n    }\n  }, [dispatch, columns]);\n  Object.assign(instance, {\n    allColumnsHidden,\n    toggleHideColumn,\n    setHiddenColumns,\n    toggleHideAllColumns,\n    getToggleHideAllColumnsProps\n  });\n}","map":{"version":3,"sources":["C:/Projects/TableSite/tablesite2/node_modules/react-table/src/hooks/useColumnVisibility.js"],"names":["React","actions","functionalUpdate","useGetLatest","makePropGetter","useMountedLayoutEffect","resetHiddenColumns","toggleHideColumn","setHiddenColumns","toggleHideAllColumns","useColumnVisibility","hooks","getToggleHiddenProps","defaultGetToggleHiddenProps","getToggleHideAllColumnsProps","defaultGetToggleHideAllColumnsProps","stateReducers","push","reducer","useInstanceBeforeDimensions","headerGroupsDeps","deps","instance","state","hiddenColumns","useInstance","pluginName","props","column","onChange","e","toggleHidden","target","checked","style","cursor","isVisible","title","allColumnsHidden","length","indeterminate","action","previousState","type","init","initialState","should","value","includes","columnId","filter","d","shouldAll","allColumns","map","id","headers","isMountedRef","useRef","current","handleColumn","parentVisible","totalVisibleHeaderCount","forEach","subColumn","subHeader","columns","flatHeaders","dispatch","getHooks","autoResetHiddenColumns","getInstance","useCallback","getAutoResetHiddenColumns","Object","assign"],"mappings":"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","sourcesContent":["import React from 'react'\n\nimport {\n  actions,\n  functionalUpdate,\n  useGetLatest,\n  makePropGetter,\n  useMountedLayoutEffect,\n} from '../publicUtils'\n\nactions.resetHiddenColumns = 'resetHiddenColumns'\nactions.toggleHideColumn = 'toggleHideColumn'\nactions.setHiddenColumns = 'setHiddenColumns'\nactions.toggleHideAllColumns = 'toggleHideAllColumns'\n\nexport const useColumnVisibility = hooks => {\n  hooks.getToggleHiddenProps = [defaultGetToggleHiddenProps]\n  hooks.getToggleHideAllColumnsProps = [defaultGetToggleHideAllColumnsProps]\n\n  hooks.stateReducers.push(reducer)\n  hooks.useInstanceBeforeDimensions.push(useInstanceBeforeDimensions)\n  hooks.headerGroupsDeps.push((deps, { instance }) => [\n    ...deps,\n    instance.state.hiddenColumns,\n  ])\n  hooks.useInstance.push(useInstance)\n}\n\nuseColumnVisibility.pluginName = 'useColumnVisibility'\n\nconst defaultGetToggleHiddenProps = (props, { column }) => [\n  props,\n  {\n    onChange: e => {\n      column.toggleHidden(!e.target.checked)\n    },\n    style: {\n      cursor: 'pointer',\n    },\n    checked: column.isVisible,\n    title: 'Toggle Column Visible',\n  },\n]\n\nconst defaultGetToggleHideAllColumnsProps = (props, { instance }) => [\n  props,\n  {\n    onChange: e => {\n      instance.toggleHideAllColumns(!e.target.checked)\n    },\n    style: {\n      cursor: 'pointer',\n    },\n    checked: !instance.allColumnsHidden && !instance.state.hiddenColumns.length,\n    title: 'Toggle All Columns Hidden',\n    indeterminate:\n      !instance.allColumnsHidden && instance.state.hiddenColumns.length,\n  },\n]\n\nfunction reducer(state, action, previousState, instance) {\n  if (action.type === actions.init) {\n    return {\n      hiddenColumns: [],\n      ...state,\n    }\n  }\n\n  if (action.type === actions.resetHiddenColumns) {\n    return {\n      ...state,\n      hiddenColumns: instance.initialState.hiddenColumns || [],\n    }\n  }\n\n  if (action.type === actions.toggleHideColumn) {\n    const should =\n      typeof action.value !== 'undefined'\n        ? action.value\n        : !state.hiddenColumns.includes(action.columnId)\n\n    const hiddenColumns = should\n      ? [...state.hiddenColumns, action.columnId]\n      : state.hiddenColumns.filter(d => d !== action.columnId)\n\n    return {\n      ...state,\n      hiddenColumns,\n    }\n  }\n\n  if (action.type === actions.setHiddenColumns) {\n    return {\n      ...state,\n      hiddenColumns: functionalUpdate(action.value, state.hiddenColumns),\n    }\n  }\n\n  if (action.type === actions.toggleHideAllColumns) {\n    const shouldAll =\n      typeof action.value !== 'undefined'\n        ? action.value\n        : !state.hiddenColumns.length\n\n    return {\n      ...state,\n      hiddenColumns: shouldAll ? instance.allColumns.map(d => d.id) : [],\n    }\n  }\n}\n\nfunction useInstanceBeforeDimensions(instance) {\n  const {\n    headers,\n    state: { hiddenColumns },\n  } = instance\n\n  const isMountedRef = React.useRef(false)\n\n  if (!isMountedRef.current) {\n  }\n\n  const handleColumn = (column, parentVisible) => {\n    column.isVisible = parentVisible && !hiddenColumns.includes(column.id)\n\n    let totalVisibleHeaderCount = 0\n\n    if (column.headers && column.headers.length) {\n      column.headers.forEach(\n        subColumn =>\n          (totalVisibleHeaderCount += handleColumn(subColumn, column.isVisible))\n      )\n    } else {\n      totalVisibleHeaderCount = column.isVisible ? 1 : 0\n    }\n\n    column.totalVisibleHeaderCount = totalVisibleHeaderCount\n\n    return totalVisibleHeaderCount\n  }\n\n  let totalVisibleHeaderCount = 0\n\n  headers.forEach(\n    subHeader => (totalVisibleHeaderCount += handleColumn(subHeader, true))\n  )\n}\n\nfunction useInstance(instance) {\n  const {\n    columns,\n    flatHeaders,\n    dispatch,\n    allColumns,\n    getHooks,\n    state: { hiddenColumns },\n    autoResetHiddenColumns = true,\n  } = instance\n\n  const getInstance = useGetLatest(instance)\n\n  const allColumnsHidden = allColumns.length === hiddenColumns.length\n\n  const toggleHideColumn = React.useCallback(\n    (columnId, value) =>\n      dispatch({ type: actions.toggleHideColumn, columnId, value }),\n    [dispatch]\n  )\n\n  const setHiddenColumns = React.useCallback(\n    value => dispatch({ type: actions.setHiddenColumns, value }),\n    [dispatch]\n  )\n\n  const toggleHideAllColumns = React.useCallback(\n    value => dispatch({ type: actions.toggleHideAllColumns, value }),\n    [dispatch]\n  )\n\n  const getToggleHideAllColumnsProps = makePropGetter(\n    getHooks().getToggleHideAllColumnsProps,\n    { instance: getInstance() }\n  )\n\n  flatHeaders.forEach(column => {\n    column.toggleHidden = value => {\n      dispatch({\n        type: actions.toggleHideColumn,\n        columnId: column.id,\n        value,\n      })\n    }\n\n    column.getToggleHiddenProps = makePropGetter(\n      getHooks().getToggleHiddenProps,\n      {\n        instance: getInstance(),\n        column,\n      }\n    )\n  })\n\n  const getAutoResetHiddenColumns = useGetLatest(autoResetHiddenColumns)\n\n  useMountedLayoutEffect(() => {\n    if (getAutoResetHiddenColumns()) {\n      dispatch({ type: actions.resetHiddenColumns })\n    }\n  }, [dispatch, columns])\n\n  Object.assign(instance, {\n    allColumnsHidden,\n    toggleHideColumn,\n    setHiddenColumns,\n    toggleHideAllColumns,\n    getToggleHideAllColumnsProps,\n  })\n}\n"]},"metadata":{},"sourceType":"module"}