{"ast":null,"code":"import React from 'react';\nimport { actions, defaultColumn, makePropGetter, useGetLatest, ensurePluginOrder, useMountedLayoutEffect } from '../publicUtils';\nimport { getFirstDefined, passiveEventSupported } from '../utils'; // Default Column\n\ndefaultColumn.canResize = true; // Actions\n\nactions.columnStartResizing = 'columnStartResizing';\nactions.columnResizing = 'columnResizing';\nactions.columnDoneResizing = 'columnDoneResizing';\nactions.resetResize = 'resetResize';\nexport const useResizeColumns = hooks => {\n  hooks.getResizerProps = [defaultGetResizerProps];\n  hooks.getHeaderProps.push({\n    style: {\n      position: 'relative'\n    }\n  });\n  hooks.stateReducers.push(reducer);\n  hooks.useInstance.push(useInstance);\n  hooks.useInstanceBeforeDimensions.push(useInstanceBeforeDimensions);\n};\n\nconst defaultGetResizerProps = (props, _ref) => {\n  let {\n    instance,\n    header\n  } = _ref;\n  const {\n    dispatch\n  } = instance;\n\n  const onResizeStart = (e, header) => {\n    let isTouchEvent = false;\n\n    if (e.type === 'touchstart') {\n      // lets not respond to multiple touches (e.g. 2 or 3 fingers)\n      if (e.touches && e.touches.length > 1) {\n        return;\n      }\n\n      isTouchEvent = true;\n    }\n\n    const headersToResize = getLeafHeaders(header);\n    const headerIdWidths = headersToResize.map(d => [d.id, d.totalWidth]);\n    const clientX = isTouchEvent ? Math.round(e.touches[0].clientX) : e.clientX;\n\n    const dispatchMove = clientXPos => {\n      dispatch({\n        type: actions.columnResizing,\n        clientX: clientXPos\n      });\n    };\n\n    const dispatchEnd = () => dispatch({\n      type: actions.columnDoneResizing\n    });\n\n    const handlersAndEvents = {\n      mouse: {\n        moveEvent: 'mousemove',\n        moveHandler: e => dispatchMove(e.clientX),\n        upEvent: 'mouseup',\n        upHandler: e => {\n          document.removeEventListener('mousemove', handlersAndEvents.mouse.moveHandler);\n          document.removeEventListener('mouseup', handlersAndEvents.mouse.upHandler);\n          dispatchEnd();\n        }\n      },\n      touch: {\n        moveEvent: 'touchmove',\n        moveHandler: e => {\n          if (e.cancelable) {\n            e.preventDefault();\n            e.stopPropagation();\n          }\n\n          dispatchMove(e.touches[0].clientX);\n          return false;\n        },\n        upEvent: 'touchend',\n        upHandler: e => {\n          document.removeEventListener(handlersAndEvents.touch.moveEvent, handlersAndEvents.touch.moveHandler);\n          document.removeEventListener(handlersAndEvents.touch.upEvent, handlersAndEvents.touch.moveHandler);\n          dispatchEnd();\n        }\n      }\n    };\n    const events = isTouchEvent ? handlersAndEvents.touch : handlersAndEvents.mouse;\n    const passiveIfSupported = passiveEventSupported() ? {\n      passive: false\n    } : false;\n    document.addEventListener(events.moveEvent, events.moveHandler, passiveIfSupported);\n    document.addEventListener(events.upEvent, events.upHandler, passiveIfSupported);\n    dispatch({\n      type: actions.columnStartResizing,\n      columnId: header.id,\n      columnWidth: header.totalWidth,\n      headerIdWidths,\n      clientX\n    });\n  };\n\n  return [props, {\n    onMouseDown: e => e.persist() || onResizeStart(e, header),\n    onTouchStart: e => e.persist() || onResizeStart(e, header),\n    style: {\n      cursor: 'col-resize'\n    },\n    draggable: false,\n    role: 'separator'\n  }];\n};\n\nuseResizeColumns.pluginName = 'useResizeColumns';\n\nfunction reducer(state, action) {\n  if (action.type === actions.init) {\n    return {\n      columnResizing: {\n        columnWidths: {}\n      },\n      ...state\n    };\n  }\n\n  if (action.type === actions.resetResize) {\n    return { ...state,\n      columnResizing: {\n        columnWidths: {}\n      }\n    };\n  }\n\n  if (action.type === actions.columnStartResizing) {\n    const {\n      clientX,\n      columnId,\n      columnWidth,\n      headerIdWidths\n    } = action;\n    return { ...state,\n      columnResizing: { ...state.columnResizing,\n        startX: clientX,\n        headerIdWidths,\n        columnWidth,\n        isResizingColumn: columnId\n      }\n    };\n  }\n\n  if (action.type === actions.columnResizing) {\n    const {\n      clientX\n    } = action;\n    const {\n      startX,\n      columnWidth,\n      headerIdWidths = []\n    } = state.columnResizing;\n    const deltaX = clientX - startX;\n    const percentageDeltaX = deltaX / columnWidth;\n    const newColumnWidths = {};\n    headerIdWidths.forEach(_ref2 => {\n      let [headerId, headerWidth] = _ref2;\n      newColumnWidths[headerId] = Math.max(headerWidth + headerWidth * percentageDeltaX, 0);\n    });\n    return { ...state,\n      columnResizing: { ...state.columnResizing,\n        columnWidths: { ...state.columnResizing.columnWidths,\n          ...newColumnWidths\n        }\n      }\n    };\n  }\n\n  if (action.type === actions.columnDoneResizing) {\n    return { ...state,\n      columnResizing: { ...state.columnResizing,\n        startX: null,\n        isResizingColumn: null\n      }\n    };\n  }\n}\n\nconst useInstanceBeforeDimensions = instance => {\n  const {\n    flatHeaders,\n    disableResizing,\n    getHooks,\n    state: {\n      columnResizing\n    }\n  } = instance;\n  const getInstance = useGetLatest(instance);\n  flatHeaders.forEach(header => {\n    const canResize = getFirstDefined(header.disableResizing === true ? false : undefined, disableResizing === true ? false : undefined, true);\n    header.canResize = canResize;\n    header.width = columnResizing.columnWidths[header.id] || header.originalWidth || header.width;\n    header.isResizing = columnResizing.isResizingColumn === header.id;\n\n    if (canResize) {\n      header.getResizerProps = makePropGetter(getHooks().getResizerProps, {\n        instance: getInstance(),\n        header\n      });\n    }\n  });\n};\n\nfunction useInstance(instance) {\n  const {\n    plugins,\n    dispatch,\n    autoResetResize = true,\n    columns\n  } = instance;\n  ensurePluginOrder(plugins, ['useAbsoluteLayout'], 'useResizeColumns');\n  const getAutoResetResize = useGetLatest(autoResetResize);\n  useMountedLayoutEffect(() => {\n    if (getAutoResetResize()) {\n      dispatch({\n        type: actions.resetResize\n      });\n    }\n  }, [columns]);\n  const resetResizing = React.useCallback(() => dispatch({\n    type: actions.resetResize\n  }), [dispatch]);\n  Object.assign(instance, {\n    resetResizing\n  });\n}\n\nfunction getLeafHeaders(header) {\n  const leafHeaders = [];\n\n  const recurseHeader = header => {\n    if (header.columns && header.columns.length) {\n      header.columns.map(recurseHeader);\n    }\n\n    leafHeaders.push(header);\n  };\n\n  recurseHeader(header);\n  return leafHeaders;\n}","map":{"version":3,"sources":["C:/Projects/TableSite/tablesite2/node_modules/react-table/src/plugin-hooks/useResizeColumns.js"],"names":["React","actions","defaultColumn","makePropGetter","useGetLatest","ensurePluginOrder","useMountedLayoutEffect","getFirstDefined","passiveEventSupported","canResize","columnStartResizing","columnResizing","columnDoneResizing","resetResize","useResizeColumns","hooks","getResizerProps","defaultGetResizerProps","getHeaderProps","push","style","position","stateReducers","reducer","useInstance","useInstanceBeforeDimensions","props","instance","header","dispatch","onResizeStart","e","isTouchEvent","type","touches","length","headersToResize","getLeafHeaders","headerIdWidths","map","d","id","totalWidth","clientX","Math","round","dispatchMove","clientXPos","dispatchEnd","handlersAndEvents","mouse","moveEvent","moveHandler","upEvent","upHandler","document","removeEventListener","touch","cancelable","preventDefault","stopPropagation","events","passiveIfSupported","passive","addEventListener","columnId","columnWidth","onMouseDown","persist","onTouchStart","cursor","draggable","role","pluginName","state","action","init","columnWidths","startX","isResizingColumn","deltaX","percentageDeltaX","newColumnWidths","forEach","headerId","headerWidth","max","flatHeaders","disableResizing","getHooks","getInstance","undefined","width","originalWidth","isResizing","plugins","autoResetResize","columns","getAutoResetResize","resetResizing","useCallback","Object","assign","leafHeaders","recurseHeader"],"mappings":"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","sourcesContent":["import React from 'react'\n\nimport {\n  actions,\n  defaultColumn,\n  makePropGetter,\n  useGetLatest,\n  ensurePluginOrder,\n  useMountedLayoutEffect,\n} from '../publicUtils'\n\nimport { getFirstDefined, passiveEventSupported } from '../utils'\n\n// Default Column\ndefaultColumn.canResize = true\n\n// Actions\nactions.columnStartResizing = 'columnStartResizing'\nactions.columnResizing = 'columnResizing'\nactions.columnDoneResizing = 'columnDoneResizing'\nactions.resetResize = 'resetResize'\n\nexport const useResizeColumns = hooks => {\n  hooks.getResizerProps = [defaultGetResizerProps]\n  hooks.getHeaderProps.push({\n    style: {\n      position: 'relative',\n    },\n  })\n  hooks.stateReducers.push(reducer)\n  hooks.useInstance.push(useInstance)\n  hooks.useInstanceBeforeDimensions.push(useInstanceBeforeDimensions)\n}\n\nconst defaultGetResizerProps = (props, { instance, header }) => {\n  const { dispatch } = instance\n\n  const onResizeStart = (e, header) => {\n    let isTouchEvent = false\n    if (e.type === 'touchstart') {\n      // lets not respond to multiple touches (e.g. 2 or 3 fingers)\n      if (e.touches && e.touches.length > 1) {\n        return\n      }\n      isTouchEvent = true\n    }\n    const headersToResize = getLeafHeaders(header)\n    const headerIdWidths = headersToResize.map(d => [d.id, d.totalWidth])\n\n    const clientX = isTouchEvent ? Math.round(e.touches[0].clientX) : e.clientX\n\n    const dispatchMove = clientXPos => {\n      dispatch({ type: actions.columnResizing, clientX: clientXPos })\n    }\n    const dispatchEnd = () => dispatch({ type: actions.columnDoneResizing })\n\n    const handlersAndEvents = {\n      mouse: {\n        moveEvent: 'mousemove',\n        moveHandler: e => dispatchMove(e.clientX),\n        upEvent: 'mouseup',\n        upHandler: e => {\n          document.removeEventListener(\n            'mousemove',\n            handlersAndEvents.mouse.moveHandler\n          )\n          document.removeEventListener(\n            'mouseup',\n            handlersAndEvents.mouse.upHandler\n          )\n          dispatchEnd()\n        },\n      },\n      touch: {\n        moveEvent: 'touchmove',\n        moveHandler: e => {\n          if (e.cancelable) {\n            e.preventDefault()\n            e.stopPropagation()\n          }\n          dispatchMove(e.touches[0].clientX)\n          return false\n        },\n        upEvent: 'touchend',\n        upHandler: e => {\n          document.removeEventListener(\n            handlersAndEvents.touch.moveEvent,\n            handlersAndEvents.touch.moveHandler\n          )\n          document.removeEventListener(\n            handlersAndEvents.touch.upEvent,\n            handlersAndEvents.touch.moveHandler\n          )\n          dispatchEnd()\n        },\n      },\n    }\n\n    const events = isTouchEvent\n      ? handlersAndEvents.touch\n      : handlersAndEvents.mouse\n    const passiveIfSupported = passiveEventSupported()\n      ? { passive: false }\n      : false\n    document.addEventListener(\n      events.moveEvent,\n      events.moveHandler,\n      passiveIfSupported\n    )\n    document.addEventListener(\n      events.upEvent,\n      events.upHandler,\n      passiveIfSupported\n    )\n\n    dispatch({\n      type: actions.columnStartResizing,\n      columnId: header.id,\n      columnWidth: header.totalWidth,\n      headerIdWidths,\n      clientX,\n    })\n  }\n\n  return [\n    props,\n    {\n      onMouseDown: e => e.persist() || onResizeStart(e, header),\n      onTouchStart: e => e.persist() || onResizeStart(e, header),\n      style: {\n        cursor: 'col-resize',\n      },\n      draggable: false,\n      role: 'separator',\n    },\n  ]\n}\n\nuseResizeColumns.pluginName = 'useResizeColumns'\n\nfunction reducer(state, action) {\n  if (action.type === actions.init) {\n    return {\n      columnResizing: {\n        columnWidths: {},\n      },\n      ...state,\n    }\n  }\n\n  if (action.type === actions.resetResize) {\n    return {\n      ...state,\n      columnResizing: {\n        columnWidths: {},\n      },\n    }\n  }\n\n  if (action.type === actions.columnStartResizing) {\n    const { clientX, columnId, columnWidth, headerIdWidths } = action\n\n    return {\n      ...state,\n      columnResizing: {\n        ...state.columnResizing,\n        startX: clientX,\n        headerIdWidths,\n        columnWidth,\n        isResizingColumn: columnId,\n      },\n    }\n  }\n\n  if (action.type === actions.columnResizing) {\n    const { clientX } = action\n    const { startX, columnWidth, headerIdWidths = [] } = state.columnResizing\n\n    const deltaX = clientX - startX\n    const percentageDeltaX = deltaX / columnWidth\n\n    const newColumnWidths = {}\n\n    headerIdWidths.forEach(([headerId, headerWidth]) => {\n      newColumnWidths[headerId] = Math.max(\n        headerWidth + headerWidth * percentageDeltaX,\n        0\n      )\n    })\n\n    return {\n      ...state,\n      columnResizing: {\n        ...state.columnResizing,\n        columnWidths: {\n          ...state.columnResizing.columnWidths,\n          ...newColumnWidths,\n        },\n      },\n    }\n  }\n\n  if (action.type === actions.columnDoneResizing) {\n    return {\n      ...state,\n      columnResizing: {\n        ...state.columnResizing,\n        startX: null,\n        isResizingColumn: null,\n      },\n    }\n  }\n}\n\nconst useInstanceBeforeDimensions = instance => {\n  const {\n    flatHeaders,\n    disableResizing,\n    getHooks,\n    state: { columnResizing },\n  } = instance\n\n  const getInstance = useGetLatest(instance)\n\n  flatHeaders.forEach(header => {\n    const canResize = getFirstDefined(\n      header.disableResizing === true ? false : undefined,\n      disableResizing === true ? false : undefined,\n      true\n    )\n\n    header.canResize = canResize\n    header.width =\n      columnResizing.columnWidths[header.id] ||\n      header.originalWidth ||\n      header.width\n    header.isResizing = columnResizing.isResizingColumn === header.id\n\n    if (canResize) {\n      header.getResizerProps = makePropGetter(getHooks().getResizerProps, {\n        instance: getInstance(),\n        header,\n      })\n    }\n  })\n}\n\nfunction useInstance(instance) {\n  const { plugins, dispatch, autoResetResize = true, columns } = instance\n\n  ensurePluginOrder(plugins, ['useAbsoluteLayout'], 'useResizeColumns')\n\n  const getAutoResetResize = useGetLatest(autoResetResize)\n  useMountedLayoutEffect(() => {\n    if (getAutoResetResize()) {\n      dispatch({ type: actions.resetResize })\n    }\n  }, [columns])\n\n  const resetResizing = React.useCallback(\n    () => dispatch({ type: actions.resetResize }),\n    [dispatch]\n  )\n\n  Object.assign(instance, {\n    resetResizing,\n  })\n}\n\nfunction getLeafHeaders(header) {\n  const leafHeaders = []\n  const recurseHeader = header => {\n    if (header.columns && header.columns.length) {\n      header.columns.map(recurseHeader)\n    }\n    leafHeaders.push(header)\n  }\n  recurseHeader(header)\n  return leafHeaders\n}\n"]},"metadata":{},"sourceType":"module"}