{"ast":null,"code":"import React from 'react';\nimport { actions, ensurePluginOrder, defaultColumn, makePropGetter, useGetLatest, useMountedLayoutEffect } from '../publicUtils';\nimport { getFirstDefined, isFunction } from '../utils';\nimport * as sortTypes from '../sortTypes'; // Actions\n\nactions.resetSortBy = 'resetSortBy';\nactions.setSortBy = 'setSortBy';\nactions.toggleSortBy = 'toggleSortBy';\nactions.clearSortBy = 'clearSortBy';\ndefaultColumn.sortType = 'alphanumeric';\ndefaultColumn.sortDescFirst = false;\nexport const useSortBy = hooks => {\n  hooks.getSortByToggleProps = [defaultGetSortByToggleProps];\n  hooks.stateReducers.push(reducer);\n  hooks.useInstance.push(useInstance);\n};\nuseSortBy.pluginName = 'useSortBy';\n\nconst defaultGetSortByToggleProps = (props, _ref) => {\n  let {\n    instance,\n    column\n  } = _ref;\n  const {\n    isMultiSortEvent = e => e.shiftKey\n  } = instance;\n  return [props, {\n    onClick: column.canSort ? e => {\n      e.persist();\n      column.toggleSortBy(undefined, !instance.disableMultiSort && isMultiSortEvent(e));\n    } : undefined,\n    style: {\n      cursor: column.canSort ? 'pointer' : undefined\n    },\n    title: column.canSort ? 'Toggle SortBy' : undefined\n  }];\n}; // Reducer\n\n\nfunction reducer(state, action, previousState, instance) {\n  if (action.type === actions.init) {\n    return {\n      sortBy: [],\n      ...state\n    };\n  }\n\n  if (action.type === actions.resetSortBy) {\n    return { ...state,\n      sortBy: instance.initialState.sortBy || []\n    };\n  }\n\n  if (action.type === actions.clearSortBy) {\n    const {\n      sortBy\n    } = state;\n    const newSortBy = sortBy.filter(d => d.id !== action.columnId);\n    return { ...state,\n      sortBy: newSortBy\n    };\n  }\n\n  if (action.type === actions.setSortBy) {\n    const {\n      sortBy\n    } = action;\n    return { ...state,\n      sortBy\n    };\n  }\n\n  if (action.type === actions.toggleSortBy) {\n    const {\n      columnId,\n      desc,\n      multi\n    } = action;\n    const {\n      allColumns,\n      disableMultiSort,\n      disableSortRemove,\n      disableMultiRemove,\n      maxMultiSortColCount = Number.MAX_SAFE_INTEGER\n    } = instance;\n    const {\n      sortBy\n    } = state; // Find the column for this columnId\n\n    const column = allColumns.find(d => d.id === columnId);\n    const {\n      sortDescFirst\n    } = column; // Find any existing sortBy for this column\n\n    const existingSortBy = sortBy.find(d => d.id === columnId);\n    const existingIndex = sortBy.findIndex(d => d.id === columnId);\n    const hasDescDefined = typeof desc !== 'undefined' && desc !== null;\n    let newSortBy = []; // What should we do with this sort action?\n\n    let sortAction;\n\n    if (!disableMultiSort && multi) {\n      if (existingSortBy) {\n        sortAction = 'toggle';\n      } else {\n        sortAction = 'add';\n      }\n    } else {\n      // Normal mode\n      if (existingIndex !== sortBy.length - 1 || sortBy.length !== 1) {\n        sortAction = 'replace';\n      } else if (existingSortBy) {\n        sortAction = 'toggle';\n      } else {\n        sortAction = 'replace';\n      }\n    } // Handle toggle states that will remove the sortBy\n\n\n    if (sortAction === 'toggle' && // Must be toggling\n    !disableSortRemove && // If disableSortRemove, disable in general\n    !hasDescDefined && ( // Must not be setting desc\n    multi ? !disableMultiRemove : true) && ( // If multi, don't allow if disableMultiRemove\n    existingSortBy && // Finally, detect if it should indeed be removed\n    existingSortBy.desc && !sortDescFirst || !existingSortBy.desc && sortDescFirst)) {\n      sortAction = 'remove';\n    }\n\n    if (sortAction === 'replace') {\n      newSortBy = [{\n        id: columnId,\n        desc: hasDescDefined ? desc : sortDescFirst\n      }];\n    } else if (sortAction === 'add') {\n      newSortBy = [...sortBy, {\n        id: columnId,\n        desc: hasDescDefined ? desc : sortDescFirst\n      }]; // Take latest n columns\n\n      newSortBy.splice(0, newSortBy.length - maxMultiSortColCount);\n    } else if (sortAction === 'toggle') {\n      // This flips (or sets) the\n      newSortBy = sortBy.map(d => {\n        if (d.id === columnId) {\n          return { ...d,\n            desc: hasDescDefined ? desc : !existingSortBy.desc\n          };\n        }\n\n        return d;\n      });\n    } else if (sortAction === 'remove') {\n      newSortBy = sortBy.filter(d => d.id !== columnId);\n    }\n\n    return { ...state,\n      sortBy: newSortBy\n    };\n  }\n}\n\nfunction useInstance(instance) {\n  const {\n    data,\n    rows,\n    flatRows,\n    allColumns,\n    orderByFn = defaultOrderByFn,\n    sortTypes: userSortTypes,\n    manualSortBy,\n    defaultCanSort,\n    disableSortBy,\n    flatHeaders,\n    state: {\n      sortBy\n    },\n    dispatch,\n    plugins,\n    getHooks,\n    autoResetSortBy = true\n  } = instance;\n  ensurePluginOrder(plugins, ['useFilters', 'useGlobalFilter', 'useGroupBy', 'usePivotColumns'], 'useSortBy');\n  const setSortBy = React.useCallback(sortBy => {\n    dispatch({\n      type: actions.setSortBy,\n      sortBy\n    });\n  }, [dispatch]); // Updates sorting based on a columnId, desc flag and multi flag\n\n  const toggleSortBy = React.useCallback((columnId, desc, multi) => {\n    dispatch({\n      type: actions.toggleSortBy,\n      columnId,\n      desc,\n      multi\n    });\n  }, [dispatch]); // use reference to avoid memory leak in #1608\n\n  const getInstance = useGetLatest(instance); // Add the getSortByToggleProps method to columns and headers\n\n  flatHeaders.forEach(column => {\n    const {\n      accessor,\n      canSort: defaultColumnCanSort,\n      disableSortBy: columnDisableSortBy,\n      id\n    } = column;\n    const canSort = accessor ? getFirstDefined(columnDisableSortBy === true ? false : undefined, disableSortBy === true ? false : undefined, true) : getFirstDefined(defaultCanSort, defaultColumnCanSort, false);\n    column.canSort = canSort;\n\n    if (column.canSort) {\n      column.toggleSortBy = (desc, multi) => toggleSortBy(column.id, desc, multi);\n\n      column.clearSortBy = () => {\n        dispatch({\n          type: actions.clearSortBy,\n          columnId: column.id\n        });\n      };\n    }\n\n    column.getSortByToggleProps = makePropGetter(getHooks().getSortByToggleProps, {\n      instance: getInstance(),\n      column\n    });\n    const columnSort = sortBy.find(d => d.id === id);\n    column.isSorted = !!columnSort;\n    column.sortedIndex = sortBy.findIndex(d => d.id === id);\n    column.isSortedDesc = column.isSorted ? columnSort.desc : undefined;\n  });\n  const [sortedRows, sortedFlatRows] = React.useMemo(() => {\n    if (manualSortBy || !sortBy.length) {\n      return [rows, flatRows];\n    }\n\n    const sortedFlatRows = []; // Filter out sortBys that correspond to non existing columns\n\n    const availableSortBy = sortBy.filter(sort => allColumns.find(col => col.id === sort.id));\n\n    const sortData = rows => {\n      // Use the orderByFn to compose multiple sortBy's together.\n      // This will also perform a stable sorting using the row index\n      // if needed.\n      const sortedData = orderByFn(rows, availableSortBy.map(sort => {\n        // Support custom sorting methods for each column\n        const column = allColumns.find(d => d.id === sort.id);\n\n        if (!column) {\n          throw new Error(`React-Table: Could not find a column with id: ${sort.id} while sorting`);\n        }\n\n        const {\n          sortType\n        } = column; // Look up sortBy functions in this order:\n        // column function\n        // column string lookup on user sortType\n        // column string lookup on built-in sortType\n        // default function\n        // default string lookup on user sortType\n        // default string lookup on built-in sortType\n\n        const sortMethod = isFunction(sortType) || (userSortTypes || {})[sortType] || sortTypes[sortType];\n\n        if (!sortMethod) {\n          throw new Error(`React-Table: Could not find a valid sortType of '${sortType}' for column '${sort.id}'.`);\n        } // Return the correct sortFn.\n        // This function should always return in ascending order\n\n\n        return (a, b) => sortMethod(a, b, sort.id, sort.desc);\n      }), // Map the directions\n      availableSortBy.map(sort => {\n        // Detect and use the sortInverted option\n        const column = allColumns.find(d => d.id === sort.id);\n\n        if (column && column.sortInverted) {\n          return sort.desc;\n        }\n\n        return !sort.desc;\n      })); // If there are sub-rows, sort them\n\n      sortedData.forEach(row => {\n        sortedFlatRows.push(row);\n\n        if (!row.subRows || row.subRows.length === 0) {\n          return;\n        }\n\n        row.subRows = sortData(row.subRows);\n      });\n      return sortedData;\n    };\n\n    return [sortData(rows), sortedFlatRows];\n  }, [manualSortBy, sortBy, rows, flatRows, allColumns, orderByFn, userSortTypes]);\n  const getAutoResetSortBy = useGetLatest(autoResetSortBy);\n  useMountedLayoutEffect(() => {\n    if (getAutoResetSortBy()) {\n      dispatch({\n        type: actions.resetSortBy\n      });\n    }\n  }, [manualSortBy ? null : data]);\n  Object.assign(instance, {\n    preSortedRows: rows,\n    preSortedFlatRows: flatRows,\n    sortedRows,\n    sortedFlatRows,\n    rows: sortedRows,\n    flatRows: sortedFlatRows,\n    setSortBy,\n    toggleSortBy\n  });\n}\n\nexport function defaultOrderByFn(arr, funcs, dirs) {\n  return [...arr].sort((rowA, rowB) => {\n    for (let i = 0; i < funcs.length; i += 1) {\n      const sortFn = funcs[i];\n      const desc = dirs[i] === false || dirs[i] === 'desc';\n      const sortInt = sortFn(rowA, rowB);\n\n      if (sortInt !== 0) {\n        return desc ? -sortInt : sortInt;\n      }\n    }\n\n    return dirs[0] ? rowA.index - rowB.index : rowB.index - rowA.index;\n  });\n}","map":{"version":3,"sources":["C:/Projects/TableSite/tablesite2/node_modules/react-table/src/plugin-hooks/useSortBy.js"],"names":["React","actions","ensurePluginOrder","defaultColumn","makePropGetter","useGetLatest","useMountedLayoutEffect","getFirstDefined","isFunction","sortTypes","resetSortBy","setSortBy","toggleSortBy","clearSortBy","sortType","sortDescFirst","useSortBy","hooks","getSortByToggleProps","defaultGetSortByToggleProps","stateReducers","push","reducer","useInstance","pluginName","props","instance","column","isMultiSortEvent","e","shiftKey","onClick","canSort","persist","undefined","disableMultiSort","style","cursor","title","state","action","previousState","type","init","sortBy","initialState","newSortBy","filter","d","id","columnId","desc","multi","allColumns","disableSortRemove","disableMultiRemove","maxMultiSortColCount","Number","MAX_SAFE_INTEGER","find","existingSortBy","existingIndex","findIndex","hasDescDefined","sortAction","length","splice","map","data","rows","flatRows","orderByFn","defaultOrderByFn","userSortTypes","manualSortBy","defaultCanSort","disableSortBy","flatHeaders","dispatch","plugins","getHooks","autoResetSortBy","useCallback","getInstance","forEach","accessor","defaultColumnCanSort","columnDisableSortBy","columnSort","isSorted","sortedIndex","isSortedDesc","sortedRows","sortedFlatRows","useMemo","availableSortBy","sort","col","sortData","sortedData","Error","sortMethod","a","b","sortInverted","row","subRows","getAutoResetSortBy","Object","assign","preSortedRows","preSortedFlatRows","arr","funcs","dirs","rowA","rowB","i","sortFn","sortInt","index"],"mappings":"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","sourcesContent":["import React from 'react'\n\nimport {\n  actions,\n  ensurePluginOrder,\n  defaultColumn,\n  makePropGetter,\n  useGetLatest,\n  useMountedLayoutEffect,\n} from '../publicUtils'\n\nimport { getFirstDefined, isFunction } from '../utils'\n\nimport * as sortTypes from '../sortTypes'\n\n// Actions\nactions.resetSortBy = 'resetSortBy'\nactions.setSortBy = 'setSortBy'\nactions.toggleSortBy = 'toggleSortBy'\nactions.clearSortBy = 'clearSortBy'\n\ndefaultColumn.sortType = 'alphanumeric'\ndefaultColumn.sortDescFirst = false\n\nexport const useSortBy = hooks => {\n  hooks.getSortByToggleProps = [defaultGetSortByToggleProps]\n  hooks.stateReducers.push(reducer)\n  hooks.useInstance.push(useInstance)\n}\n\nuseSortBy.pluginName = 'useSortBy'\n\nconst defaultGetSortByToggleProps = (props, { instance, column }) => {\n  const { isMultiSortEvent = e => e.shiftKey } = instance\n\n  return [\n    props,\n    {\n      onClick: column.canSort\n        ? e => {\n            e.persist()\n            column.toggleSortBy(\n              undefined,\n              !instance.disableMultiSort && isMultiSortEvent(e)\n            )\n          }\n        : undefined,\n      style: {\n        cursor: column.canSort ? 'pointer' : undefined,\n      },\n      title: column.canSort ? 'Toggle SortBy' : undefined,\n    },\n  ]\n}\n\n// Reducer\nfunction reducer(state, action, previousState, instance) {\n  if (action.type === actions.init) {\n    return {\n      sortBy: [],\n      ...state,\n    }\n  }\n\n  if (action.type === actions.resetSortBy) {\n    return {\n      ...state,\n      sortBy: instance.initialState.sortBy || [],\n    }\n  }\n\n  if (action.type === actions.clearSortBy) {\n    const { sortBy } = state\n    const newSortBy = sortBy.filter(d => d.id !== action.columnId)\n\n    return {\n      ...state,\n      sortBy: newSortBy,\n    }\n  }\n\n  if (action.type === actions.setSortBy) {\n    const { sortBy } = action\n    return {\n      ...state,\n      sortBy,\n    }\n  }\n\n  if (action.type === actions.toggleSortBy) {\n    const { columnId, desc, multi } = action\n\n    const {\n      allColumns,\n      disableMultiSort,\n      disableSortRemove,\n      disableMultiRemove,\n      maxMultiSortColCount = Number.MAX_SAFE_INTEGER,\n    } = instance\n\n    const { sortBy } = state\n\n    // Find the column for this columnId\n    const column = allColumns.find(d => d.id === columnId)\n    const { sortDescFirst } = column\n\n    // Find any existing sortBy for this column\n    const existingSortBy = sortBy.find(d => d.id === columnId)\n    const existingIndex = sortBy.findIndex(d => d.id === columnId)\n    const hasDescDefined = typeof desc !== 'undefined' && desc !== null\n\n    let newSortBy = []\n\n    // What should we do with this sort action?\n    let sortAction\n\n    if (!disableMultiSort && multi) {\n      if (existingSortBy) {\n        sortAction = 'toggle'\n      } else {\n        sortAction = 'add'\n      }\n    } else {\n      // Normal mode\n      if (existingIndex !== sortBy.length - 1 || sortBy.length !== 1) {\n        sortAction = 'replace'\n      } else if (existingSortBy) {\n        sortAction = 'toggle'\n      } else {\n        sortAction = 'replace'\n      }\n    }\n\n    // Handle toggle states that will remove the sortBy\n    if (\n      sortAction === 'toggle' && // Must be toggling\n      !disableSortRemove && // If disableSortRemove, disable in general\n      !hasDescDefined && // Must not be setting desc\n      (multi ? !disableMultiRemove : true) && // If multi, don't allow if disableMultiRemove\n      ((existingSortBy && // Finally, detect if it should indeed be removed\n        existingSortBy.desc &&\n        !sortDescFirst) ||\n        (!existingSortBy.desc && sortDescFirst))\n    ) {\n      sortAction = 'remove'\n    }\n\n    if (sortAction === 'replace') {\n      newSortBy = [\n        {\n          id: columnId,\n          desc: hasDescDefined ? desc : sortDescFirst,\n        },\n      ]\n    } else if (sortAction === 'add') {\n      newSortBy = [\n        ...sortBy,\n        {\n          id: columnId,\n          desc: hasDescDefined ? desc : sortDescFirst,\n        },\n      ]\n      // Take latest n columns\n      newSortBy.splice(0, newSortBy.length - maxMultiSortColCount)\n    } else if (sortAction === 'toggle') {\n      // This flips (or sets) the\n      newSortBy = sortBy.map(d => {\n        if (d.id === columnId) {\n          return {\n            ...d,\n            desc: hasDescDefined ? desc : !existingSortBy.desc,\n          }\n        }\n        return d\n      })\n    } else if (sortAction === 'remove') {\n      newSortBy = sortBy.filter(d => d.id !== columnId)\n    }\n\n    return {\n      ...state,\n      sortBy: newSortBy,\n    }\n  }\n}\n\nfunction useInstance(instance) {\n  const {\n    data,\n    rows,\n    flatRows,\n    allColumns,\n    orderByFn = defaultOrderByFn,\n    sortTypes: userSortTypes,\n    manualSortBy,\n    defaultCanSort,\n    disableSortBy,\n    flatHeaders,\n    state: { sortBy },\n    dispatch,\n    plugins,\n    getHooks,\n    autoResetSortBy = true,\n  } = instance\n\n  ensurePluginOrder(\n    plugins,\n    ['useFilters', 'useGlobalFilter', 'useGroupBy', 'usePivotColumns'],\n    'useSortBy'\n  )\n\n  const setSortBy = React.useCallback(\n    sortBy => {\n      dispatch({ type: actions.setSortBy, sortBy })\n    },\n    [dispatch]\n  )\n\n  // Updates sorting based on a columnId, desc flag and multi flag\n  const toggleSortBy = React.useCallback(\n    (columnId, desc, multi) => {\n      dispatch({ type: actions.toggleSortBy, columnId, desc, multi })\n    },\n    [dispatch]\n  )\n\n  // use reference to avoid memory leak in #1608\n  const getInstance = useGetLatest(instance)\n\n  // Add the getSortByToggleProps method to columns and headers\n  flatHeaders.forEach(column => {\n    const {\n      accessor,\n      canSort: defaultColumnCanSort,\n      disableSortBy: columnDisableSortBy,\n      id,\n    } = column\n\n    const canSort = accessor\n      ? getFirstDefined(\n          columnDisableSortBy === true ? false : undefined,\n          disableSortBy === true ? false : undefined,\n          true\n        )\n      : getFirstDefined(defaultCanSort, defaultColumnCanSort, false)\n\n    column.canSort = canSort\n\n    if (column.canSort) {\n      column.toggleSortBy = (desc, multi) =>\n        toggleSortBy(column.id, desc, multi)\n\n      column.clearSortBy = () => {\n        dispatch({ type: actions.clearSortBy, columnId: column.id })\n      }\n    }\n\n    column.getSortByToggleProps = makePropGetter(\n      getHooks().getSortByToggleProps,\n      {\n        instance: getInstance(),\n        column,\n      }\n    )\n\n    const columnSort = sortBy.find(d => d.id === id)\n    column.isSorted = !!columnSort\n    column.sortedIndex = sortBy.findIndex(d => d.id === id)\n    column.isSortedDesc = column.isSorted ? columnSort.desc : undefined\n  })\n\n  const [sortedRows, sortedFlatRows] = React.useMemo(() => {\n    if (manualSortBy || !sortBy.length) {\n      return [rows, flatRows]\n    }\n\n    const sortedFlatRows = []\n\n    // Filter out sortBys that correspond to non existing columns\n    const availableSortBy = sortBy.filter(sort =>\n      allColumns.find(col => col.id === sort.id)\n    )\n\n    const sortData = rows => {\n      // Use the orderByFn to compose multiple sortBy's together.\n      // This will also perform a stable sorting using the row index\n      // if needed.\n      const sortedData = orderByFn(\n        rows,\n        availableSortBy.map(sort => {\n          // Support custom sorting methods for each column\n          const column = allColumns.find(d => d.id === sort.id)\n\n          if (!column) {\n            throw new Error(\n              `React-Table: Could not find a column with id: ${sort.id} while sorting`\n            )\n          }\n\n          const { sortType } = column\n\n          // Look up sortBy functions in this order:\n          // column function\n          // column string lookup on user sortType\n          // column string lookup on built-in sortType\n          // default function\n          // default string lookup on user sortType\n          // default string lookup on built-in sortType\n          const sortMethod =\n            isFunction(sortType) ||\n            (userSortTypes || {})[sortType] ||\n            sortTypes[sortType]\n\n          if (!sortMethod) {\n            throw new Error(\n              `React-Table: Could not find a valid sortType of '${sortType}' for column '${sort.id}'.`\n            )\n          }\n\n          // Return the correct sortFn.\n          // This function should always return in ascending order\n          return (a, b) => sortMethod(a, b, sort.id, sort.desc)\n        }),\n        // Map the directions\n        availableSortBy.map(sort => {\n          // Detect and use the sortInverted option\n          const column = allColumns.find(d => d.id === sort.id)\n\n          if (column && column.sortInverted) {\n            return sort.desc\n          }\n\n          return !sort.desc\n        })\n      )\n\n      // If there are sub-rows, sort them\n      sortedData.forEach(row => {\n        sortedFlatRows.push(row)\n        if (!row.subRows || row.subRows.length === 0) {\n          return\n        }\n        row.subRows = sortData(row.subRows)\n      })\n\n      return sortedData\n    }\n\n    return [sortData(rows), sortedFlatRows]\n  }, [\n    manualSortBy,\n    sortBy,\n    rows,\n    flatRows,\n    allColumns,\n    orderByFn,\n    userSortTypes,\n  ])\n\n  const getAutoResetSortBy = useGetLatest(autoResetSortBy)\n\n  useMountedLayoutEffect(() => {\n    if (getAutoResetSortBy()) {\n      dispatch({ type: actions.resetSortBy })\n    }\n  }, [manualSortBy ? null : data])\n\n  Object.assign(instance, {\n    preSortedRows: rows,\n    preSortedFlatRows: flatRows,\n    sortedRows,\n    sortedFlatRows,\n    rows: sortedRows,\n    flatRows: sortedFlatRows,\n    setSortBy,\n    toggleSortBy,\n  })\n}\n\nexport function defaultOrderByFn(arr, funcs, dirs) {\n  return [...arr].sort((rowA, rowB) => {\n    for (let i = 0; i < funcs.length; i += 1) {\n      const sortFn = funcs[i]\n      const desc = dirs[i] === false || dirs[i] === 'desc'\n      const sortInt = sortFn(rowA, rowB)\n      if (sortInt !== 0) {\n        return desc ? -sortInt : sortInt\n      }\n    }\n    return dirs[0] ? rowA.index - rowB.index : rowB.index - rowA.index\n  })\n}\n"]},"metadata":{},"sourceType":"module"}