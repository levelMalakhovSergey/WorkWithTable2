{"ast":null,"code":"const reSplitAlphaNumeric = /([0-9]+)/gm; // Mixed sorting is slow, but very inclusive of many edge cases.\n// It handles numbers, mixed alphanumeric combinations, and even\n// null, undefined, and Infinity\n\nexport const alphanumeric = (rowA, rowB, columnId) => {\n  let [a, b] = getRowValuesByColumnID(rowA, rowB, columnId); // Force to strings (or \"\" for unsupported types)\n\n  a = toString(a);\n  b = toString(b); // Split on number groups, but keep the delimiter\n  // Then remove falsey split values\n\n  a = a.split(reSplitAlphaNumeric).filter(Boolean);\n  b = b.split(reSplitAlphaNumeric).filter(Boolean); // While\n\n  while (a.length && b.length) {\n    let aa = a.shift();\n    let bb = b.shift();\n    const an = parseInt(aa, 10);\n    const bn = parseInt(bb, 10);\n    const combo = [an, bn].sort(); // Both are string\n\n    if (isNaN(combo[0])) {\n      if (aa > bb) {\n        return 1;\n      }\n\n      if (bb > aa) {\n        return -1;\n      }\n\n      continue;\n    } // One is a string, one is a number\n\n\n    if (isNaN(combo[1])) {\n      return isNaN(an) ? -1 : 1;\n    } // Both are numbers\n\n\n    if (an > bn) {\n      return 1;\n    }\n\n    if (bn > an) {\n      return -1;\n    }\n  }\n\n  return a.length - b.length;\n};\nexport function datetime(rowA, rowB, columnId) {\n  let [a, b] = getRowValuesByColumnID(rowA, rowB, columnId);\n  a = a.getTime();\n  b = b.getTime();\n  return compareBasic(a, b);\n}\nexport function basic(rowA, rowB, columnId) {\n  let [a, b] = getRowValuesByColumnID(rowA, rowB, columnId);\n  return compareBasic(a, b);\n}\nexport function string(rowA, rowB, columnId) {\n  let [a, b] = getRowValuesByColumnID(rowA, rowB, columnId);\n  a = a.split('').filter(Boolean);\n  b = b.split('').filter(Boolean);\n\n  while (a.length && b.length) {\n    let aa = a.shift();\n    let bb = b.shift();\n    let alower = aa.toLowerCase();\n    let blower = bb.toLowerCase(); // Case insensitive comparison until characters match\n\n    if (alower > blower) {\n      return 1;\n    }\n\n    if (blower > alower) {\n      return -1;\n    } // If lowercase characters are identical\n\n\n    if (aa > bb) {\n      return 1;\n    }\n\n    if (bb > aa) {\n      return -1;\n    }\n\n    continue;\n  }\n\n  return a.length - b.length;\n}\nexport function number(rowA, rowB, columnId) {\n  let [a, b] = getRowValuesByColumnID(rowA, rowB, columnId);\n  const replaceNonNumeric = /[^0-9.]/gi;\n  a = Number(String(a).replace(replaceNonNumeric, ''));\n  b = Number(String(b).replace(replaceNonNumeric, ''));\n  return compareBasic(a, b);\n} // Utils\n\nfunction compareBasic(a, b) {\n  return a === b ? 0 : a > b ? 1 : -1;\n}\n\nfunction getRowValuesByColumnID(row1, row2, columnId) {\n  return [row1.values[columnId], row2.values[columnId]];\n}\n\nfunction toString(a) {\n  if (typeof a === 'number') {\n    if (isNaN(a) || a === Infinity || a === -Infinity) {\n      return '';\n    }\n\n    return String(a);\n  }\n\n  if (typeof a === 'string') {\n    return a;\n  }\n\n  return '';\n}","map":{"version":3,"sources":["C:/Projects/TableSite/tablesite2/node_modules/react-table/src/sortTypes.js"],"names":["reSplitAlphaNumeric","alphanumeric","rowA","rowB","columnId","a","b","getRowValuesByColumnID","toString","split","filter","Boolean","length","aa","shift","bb","an","parseInt","bn","combo","sort","isNaN","datetime","getTime","compareBasic","basic","string","alower","toLowerCase","blower","number","replaceNonNumeric","Number","String","replace","row1","row2","values","Infinity"],"mappings":"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","sourcesContent":["const reSplitAlphaNumeric = /([0-9]+)/gm\n\n// Mixed sorting is slow, but very inclusive of many edge cases.\n// It handles numbers, mixed alphanumeric combinations, and even\n// null, undefined, and Infinity\nexport const alphanumeric = (rowA, rowB, columnId) => {\n  let [a, b] = getRowValuesByColumnID(rowA, rowB, columnId)\n\n  // Force to strings (or \"\" for unsupported types)\n  a = toString(a)\n  b = toString(b)\n\n  // Split on number groups, but keep the delimiter\n  // Then remove falsey split values\n  a = a.split(reSplitAlphaNumeric).filter(Boolean)\n  b = b.split(reSplitAlphaNumeric).filter(Boolean)\n\n  // While\n  while (a.length && b.length) {\n    let aa = a.shift()\n    let bb = b.shift()\n\n    const an = parseInt(aa, 10)\n    const bn = parseInt(bb, 10)\n\n    const combo = [an, bn].sort()\n\n    // Both are string\n    if (isNaN(combo[0])) {\n      if (aa > bb) {\n        return 1\n      }\n      if (bb > aa) {\n        return -1\n      }\n      continue\n    }\n\n    // One is a string, one is a number\n    if (isNaN(combo[1])) {\n      return isNaN(an) ? -1 : 1\n    }\n\n    // Both are numbers\n    if (an > bn) {\n      return 1\n    }\n    if (bn > an) {\n      return -1\n    }\n  }\n\n  return a.length - b.length\n}\nexport function datetime(rowA, rowB, columnId) {\n  let [a, b] = getRowValuesByColumnID(rowA, rowB, columnId)\n\n  a = a.getTime()\n  b = b.getTime()\n\n  return compareBasic(a, b)\n}\n\nexport function basic(rowA, rowB, columnId) {\n  let [a, b] = getRowValuesByColumnID(rowA, rowB, columnId)\n\n  return compareBasic(a, b)\n}\n\nexport function string(rowA, rowB, columnId) {\n  let [a, b] = getRowValuesByColumnID(rowA, rowB, columnId)\n\n  a = a.split('').filter(Boolean)\n  b = b.split('').filter(Boolean)\n\n  while (a.length && b.length) {\n    let aa = a.shift()\n    let bb = b.shift()\n\n    let alower = aa.toLowerCase()\n    let blower = bb.toLowerCase()\n\n    // Case insensitive comparison until characters match\n    if (alower > blower) {\n      return 1\n    }\n    if (blower > alower) {\n      return -1\n    }\n    // If lowercase characters are identical\n    if (aa > bb) {\n      return 1\n    }\n    if (bb > aa) {\n      return -1\n    }\n    continue\n  }\n\n  return a.length - b.length\n}\n\nexport function number(rowA, rowB, columnId) {\n  let [a, b] = getRowValuesByColumnID(rowA, rowB, columnId)\n\n  const replaceNonNumeric = /[^0-9.]/gi\n\n  a = Number(String(a).replace(replaceNonNumeric, ''))\n  b = Number(String(b).replace(replaceNonNumeric, ''))\n\n  return compareBasic(a, b)\n}\n\n// Utils\n\nfunction compareBasic(a, b) {\n  return a === b ? 0 : a > b ? 1 : -1\n}\n\nfunction getRowValuesByColumnID(row1, row2, columnId) {\n  return [row1.values[columnId], row2.values[columnId]]\n}\n\nfunction toString(a) {\n  if (typeof a === 'number') {\n    if (isNaN(a) || a === Infinity || a === -Infinity) {\n      return ''\n    }\n    return String(a)\n  }\n  if (typeof a === 'string') {\n    return a\n  }\n  return ''\n}\n"]},"metadata":{},"sourceType":"module"}