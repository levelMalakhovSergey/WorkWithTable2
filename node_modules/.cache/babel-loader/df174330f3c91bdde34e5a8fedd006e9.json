{"ast":null,"code":"import React from 'react'; //\n\nimport { linkColumnStructure, flattenColumns, assignColumnAccessor, unpreparedAccessWarning, makeHeaderGroups, decorateColumn } from '../utils';\nimport { useGetLatest, reduceHooks, actions, loopHooks, makePropGetter, makeRenderer } from '../publicUtils';\nimport makeDefaultPluginHooks from '../makeDefaultPluginHooks';\nimport { useColumnVisibility } from './useColumnVisibility';\nconst defaultInitialState = {};\nconst defaultColumnInstance = {};\n\nconst defaultReducer = (state, action, prevState) => state;\n\nconst defaultGetSubRows = (row, index) => row.subRows || [];\n\nconst defaultGetRowId = (row, index, parent) => `${parent ? [parent.id, index].join('.') : index}`;\n\nconst defaultUseControlledState = d => d;\n\nfunction applyDefaults(props) {\n  const {\n    initialState = defaultInitialState,\n    defaultColumn = defaultColumnInstance,\n    getSubRows = defaultGetSubRows,\n    getRowId = defaultGetRowId,\n    stateReducer = defaultReducer,\n    useControlledState = defaultUseControlledState,\n    ...rest\n  } = props;\n  return { ...rest,\n    initialState,\n    defaultColumn,\n    getSubRows,\n    getRowId,\n    stateReducer,\n    useControlledState\n  };\n}\n\nexport const useTable = function (props) {\n  for (var _len = arguments.length, plugins = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    plugins[_key - 1] = arguments[_key];\n  }\n\n  // Apply default props\n  props = applyDefaults(props); // Add core plugins\n\n  plugins = [useColumnVisibility, ...plugins]; // Create the table instance\n\n  let instanceRef = React.useRef({}); // Create a getter for the instance (helps avoid a lot of potential memory leaks)\n\n  const getInstance = useGetLatest(instanceRef.current); // Assign the props, plugins and hooks to the instance\n\n  Object.assign(getInstance(), { ...props,\n    plugins,\n    hooks: makeDefaultPluginHooks()\n  }); // Allow plugins to register hooks as early as possible\n\n  plugins.filter(Boolean).forEach(plugin => {\n    plugin(getInstance().hooks);\n  }); // Consume all hooks and make a getter for them\n\n  const getHooks = useGetLatest(getInstance().hooks);\n  getInstance().getHooks = getHooks;\n  delete getInstance().hooks; // Allow useOptions hooks to modify the options coming into the table\n\n  Object.assign(getInstance(), reduceHooks(getHooks().useOptions, applyDefaults(props)));\n  const {\n    data,\n    columns: userColumns,\n    initialState,\n    defaultColumn,\n    getSubRows,\n    getRowId,\n    stateReducer,\n    useControlledState\n  } = getInstance(); // Setup user reducer ref\n\n  const getStateReducer = useGetLatest(stateReducer); // Build the reducer\n\n  const reducer = React.useCallback((state, action) => {\n    // Detect invalid actions\n    if (!action.type) {\n      console.info({\n        action\n      });\n      throw new Error('Unknown Action ðŸ‘†');\n    } // Reduce the state from all plugin reducers\n\n\n    return [...getHooks().stateReducers, // Allow the user to add their own state reducer(s)\n    ...(Array.isArray(getStateReducer()) ? getStateReducer() : [getStateReducer()])].reduce((s, handler) => handler(s, action, state, getInstance()) || s, state);\n  }, [getHooks, getStateReducer, getInstance]); // Start the reducer\n\n  const [reducerState, dispatch] = React.useReducer(reducer, undefined, () => reducer(initialState, {\n    type: actions.init\n  })); // Allow the user to control the final state with hooks\n\n  const state = reduceHooks([...getHooks().useControlledState, useControlledState], reducerState, {\n    instance: getInstance()\n  });\n  Object.assign(getInstance(), {\n    state,\n    dispatch\n  }); // Decorate All the columns\n\n  const columns = React.useMemo(() => linkColumnStructure(reduceHooks(getHooks().columns, userColumns, {\n    instance: getInstance()\n  })), [getHooks, getInstance, userColumns, // eslint-disable-next-line react-hooks/exhaustive-deps\n  ...reduceHooks(getHooks().columnsDeps, [], {\n    instance: getInstance()\n  })]);\n  getInstance().columns = columns; // Get the flat list of all columns and allow hooks to decorate\n  // those columns (and trigger this memoization via deps)\n\n  let allColumns = React.useMemo(() => reduceHooks(getHooks().allColumns, flattenColumns(columns), {\n    instance: getInstance()\n  }).map(assignColumnAccessor), [columns, getHooks, getInstance, // eslint-disable-next-line react-hooks/exhaustive-deps\n  ...reduceHooks(getHooks().allColumnsDeps, [], {\n    instance: getInstance()\n  })]);\n  getInstance().allColumns = allColumns; // Access the row model using initial columns\n\n  const [rows, flatRows, rowsById] = React.useMemo(() => {\n    let rows = [];\n    let flatRows = [];\n    const rowsById = {};\n    const allColumnsQueue = [...allColumns];\n\n    while (allColumnsQueue.length) {\n      const column = allColumnsQueue.shift();\n      accessRowsForColumn({\n        data,\n        rows,\n        flatRows,\n        rowsById,\n        column,\n        getRowId,\n        getSubRows,\n        accessValueHooks: getHooks().accessValue,\n        getInstance\n      });\n    }\n\n    return [rows, flatRows, rowsById];\n  }, [allColumns, data, getRowId, getSubRows, getHooks, getInstance]);\n  Object.assign(getInstance(), {\n    rows,\n    initialRows: [...rows],\n    flatRows,\n    rowsById // materializedColumns,\n\n  });\n  loopHooks(getHooks().useInstanceAfterData, getInstance()); // Get the flat list of all columns AFTER the rows\n  // have been access, and allow hooks to decorate\n  // those columns (and trigger this memoization via deps)\n\n  let visibleColumns = React.useMemo(() => reduceHooks(getHooks().visibleColumns, allColumns, {\n    instance: getInstance()\n  }).map(d => decorateColumn(d, defaultColumn)), [getHooks, allColumns, getInstance, defaultColumn, // eslint-disable-next-line react-hooks/exhaustive-deps\n  ...reduceHooks(getHooks().visibleColumnsDeps, [], {\n    instance: getInstance()\n  })]); // Combine new visible columns with all columns\n\n  allColumns = React.useMemo(() => {\n    const columns = [...visibleColumns];\n    allColumns.forEach(column => {\n      if (!columns.find(d => d.id === column.id)) {\n        columns.push(column);\n      }\n    });\n    return columns;\n  }, [allColumns, visibleColumns]);\n  getInstance().allColumns = allColumns;\n\n  if (process.env.NODE_ENV !== 'production') {\n    const duplicateColumns = allColumns.filter((column, i) => {\n      return allColumns.findIndex(d => d.id === column.id) !== i;\n    });\n\n    if (duplicateColumns.length) {\n      console.info(allColumns);\n      throw new Error(`Duplicate columns were found with ids: \"${duplicateColumns.map(d => d.id).join(', ')}\" in the columns array above`);\n    }\n  } // Make the headerGroups\n\n\n  const headerGroups = React.useMemo(() => reduceHooks(getHooks().headerGroups, makeHeaderGroups(visibleColumns, defaultColumn), getInstance()), [getHooks, visibleColumns, defaultColumn, getInstance, // eslint-disable-next-line react-hooks/exhaustive-deps\n  ...reduceHooks(getHooks().headerGroupsDeps, [], {\n    instance: getInstance()\n  })]);\n  getInstance().headerGroups = headerGroups; // Get the first level of headers\n\n  const headers = React.useMemo(() => headerGroups.length ? headerGroups[0].headers : [], [headerGroups]);\n  getInstance().headers = headers; // Provide a flat header list for utilities\n\n  getInstance().flatHeaders = headerGroups.reduce((all, headerGroup) => [...all, ...headerGroup.headers], []);\n  loopHooks(getHooks().useInstanceBeforeDimensions, getInstance()); // Filter columns down to visible ones\n\n  const visibleColumnsDep = visibleColumns.filter(d => d.isVisible).map(d => d.id).sort().join('_');\n  visibleColumns = React.useMemo(() => visibleColumns.filter(d => d.isVisible), // eslint-disable-next-line react-hooks/exhaustive-deps\n  [visibleColumns, visibleColumnsDep]);\n  getInstance().visibleColumns = visibleColumns; // Header Visibility is needed by this point\n\n  const [totalColumnsMinWidth, totalColumnsWidth, totalColumnsMaxWidth] = calculateHeaderWidths(headers);\n  getInstance().totalColumnsMinWidth = totalColumnsMinWidth;\n  getInstance().totalColumnsWidth = totalColumnsWidth;\n  getInstance().totalColumnsMaxWidth = totalColumnsMaxWidth;\n  loopHooks(getHooks().useInstance, getInstance()) // Each materialized header needs to be assigned a render function and other\n  // prop getter properties here.\n  ;\n  [...getInstance().flatHeaders, ...getInstance().allColumns].forEach(column => {\n    // Give columns/headers rendering power\n    column.render = makeRenderer(getInstance(), column); // Give columns/headers a default getHeaderProps\n\n    column.getHeaderProps = makePropGetter(getHooks().getHeaderProps, {\n      instance: getInstance(),\n      column\n    }); // Give columns/headers a default getFooterProps\n\n    column.getFooterProps = makePropGetter(getHooks().getFooterProps, {\n      instance: getInstance(),\n      column\n    });\n  });\n  getInstance().headerGroups = React.useMemo(() => headerGroups.filter((headerGroup, i) => {\n    // Filter out any headers and headerGroups that don't have visible columns\n    headerGroup.headers = headerGroup.headers.filter(column => {\n      const recurse = headers => headers.filter(column => {\n        if (column.headers) {\n          return recurse(column.headers);\n        }\n\n        return column.isVisible;\n      }).length;\n\n      if (column.headers) {\n        return recurse(column.headers);\n      }\n\n      return column.isVisible;\n    }); // Give headerGroups getRowProps\n\n    if (headerGroup.headers.length) {\n      headerGroup.getHeaderGroupProps = makePropGetter(getHooks().getHeaderGroupProps, {\n        instance: getInstance(),\n        headerGroup,\n        index: i\n      });\n      headerGroup.getFooterGroupProps = makePropGetter(getHooks().getFooterGroupProps, {\n        instance: getInstance(),\n        headerGroup,\n        index: i\n      });\n      return true;\n    }\n\n    return false;\n  }), [headerGroups, getInstance, getHooks]);\n  getInstance().footerGroups = [...getInstance().headerGroups].reverse(); // The prepareRow function is absolutely necessary and MUST be called on\n  // any rows the user wishes to be displayed.\n\n  getInstance().prepareRow = React.useCallback(row => {\n    row.getRowProps = makePropGetter(getHooks().getRowProps, {\n      instance: getInstance(),\n      row\n    }); // Build the visible cells for each row\n\n    row.allCells = allColumns.map(column => {\n      const value = row.values[column.id];\n      const cell = {\n        column,\n        row,\n        value\n      }; // Give each cell a getCellProps base\n\n      cell.getCellProps = makePropGetter(getHooks().getCellProps, {\n        instance: getInstance(),\n        cell\n      }); // Give each cell a renderer function (supports multiple renderers)\n\n      cell.render = makeRenderer(getInstance(), column, {\n        row,\n        cell,\n        value\n      });\n      return cell;\n    });\n    row.cells = visibleColumns.map(column => row.allCells.find(cell => cell.column.id === column.id)); // need to apply any row specific hooks (useExpanded requires this)\n\n    loopHooks(getHooks().prepareRow, row, {\n      instance: getInstance()\n    });\n  }, [getHooks, getInstance, allColumns, visibleColumns]);\n  getInstance().getTableProps = makePropGetter(getHooks().getTableProps, {\n    instance: getInstance()\n  });\n  getInstance().getTableBodyProps = makePropGetter(getHooks().getTableBodyProps, {\n    instance: getInstance()\n  });\n  loopHooks(getHooks().useFinalInstance, getInstance());\n  return getInstance();\n};\n\nfunction calculateHeaderWidths(headers) {\n  let left = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  let sumTotalMinWidth = 0;\n  let sumTotalWidth = 0;\n  let sumTotalMaxWidth = 0;\n  let sumTotalFlexWidth = 0;\n  headers.forEach(header => {\n    let {\n      headers: subHeaders\n    } = header;\n    header.totalLeft = left;\n\n    if (subHeaders && subHeaders.length) {\n      const [totalMinWidth, totalWidth, totalMaxWidth, totalFlexWidth] = calculateHeaderWidths(subHeaders, left);\n      header.totalMinWidth = totalMinWidth;\n      header.totalWidth = totalWidth;\n      header.totalMaxWidth = totalMaxWidth;\n      header.totalFlexWidth = totalFlexWidth;\n    } else {\n      header.totalMinWidth = header.minWidth;\n      header.totalWidth = Math.min(Math.max(header.minWidth, header.width), header.maxWidth);\n      header.totalMaxWidth = header.maxWidth;\n      header.totalFlexWidth = header.canResize ? header.totalWidth : 0;\n    }\n\n    if (header.isVisible) {\n      left += header.totalWidth;\n      sumTotalMinWidth += header.totalMinWidth;\n      sumTotalWidth += header.totalWidth;\n      sumTotalMaxWidth += header.totalMaxWidth;\n      sumTotalFlexWidth += header.totalFlexWidth;\n    }\n  });\n  return [sumTotalMinWidth, sumTotalWidth, sumTotalMaxWidth, sumTotalFlexWidth];\n}\n\nfunction accessRowsForColumn(_ref) {\n  let {\n    data,\n    rows,\n    flatRows,\n    rowsById,\n    column,\n    getRowId,\n    getSubRows,\n    accessValueHooks,\n    getInstance\n  } = _ref;\n\n  // Access the row's data column-by-column\n  // We do it this way so we can incrementally add materialized\n  // columns after the first pass and avoid excessive looping\n  const accessRow = function (originalRow, rowIndex) {\n    let depth = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n    let parent = arguments.length > 3 ? arguments[3] : undefined;\n    let parentRows = arguments.length > 4 ? arguments[4] : undefined;\n    // Keep the original reference around\n    const original = originalRow;\n    const id = getRowId(originalRow, rowIndex, parent);\n    let row = rowsById[id]; // If the row hasn't been created, let's make it\n\n    if (!row) {\n      row = {\n        id,\n        original,\n        index: rowIndex,\n        depth,\n        cells: [{}] // This is a dummy cell\n\n      }; // Override common array functions (and the dummy cell's getCellProps function)\n      // to show an error if it is accessed without calling prepareRow\n\n      row.cells.map = unpreparedAccessWarning;\n      row.cells.filter = unpreparedAccessWarning;\n      row.cells.forEach = unpreparedAccessWarning;\n      row.cells[0].getCellProps = unpreparedAccessWarning; // Create the cells and values\n\n      row.values = {}; // Push this row into the parentRows array\n\n      parentRows.push(row); // Keep track of every row in a flat array\n\n      flatRows.push(row); // Also keep track of every row by its ID\n\n      rowsById[id] = row; // Get the original subrows\n\n      row.originalSubRows = getSubRows(originalRow, rowIndex); // Then recursively access them\n\n      if (row.originalSubRows) {\n        const subRows = [];\n        row.originalSubRows.forEach((d, i) => accessRow(d, i, depth + 1, row, subRows)); // Keep the new subRows array on the row\n\n        row.subRows = subRows;\n      }\n    } else if (row.subRows) {\n      // If the row exists, then it's already been accessed\n      // Keep recursing, but don't worry about passing the\n      // accumlator array (those rows already exist)\n      row.originalSubRows.forEach((d, i) => accessRow(d, i, depth + 1, row));\n    } // If the column has an accessor, use it to get a value\n\n\n    if (column.accessor) {\n      row.values[column.id] = column.accessor(originalRow, rowIndex, row, parentRows, data);\n    } // Allow plugins to manipulate the column value\n\n\n    row.values[column.id] = reduceHooks(accessValueHooks, row.values[column.id], {\n      row,\n      column,\n      instance: getInstance()\n    }, true);\n  };\n\n  data.forEach((originalRow, rowIndex) => accessRow(originalRow, rowIndex, 0, undefined, rows));\n}","map":{"version":3,"sources":["C:/Projects/TableSite/tablesite2/node_modules/react-table/src/hooks/useTable.js"],"names":["React","linkColumnStructure","flattenColumns","assignColumnAccessor","unpreparedAccessWarning","makeHeaderGroups","decorateColumn","useGetLatest","reduceHooks","actions","loopHooks","makePropGetter","makeRenderer","makeDefaultPluginHooks","useColumnVisibility","defaultInitialState","defaultColumnInstance","defaultReducer","state","action","prevState","defaultGetSubRows","row","index","subRows","defaultGetRowId","parent","id","join","defaultUseControlledState","d","applyDefaults","props","initialState","defaultColumn","getSubRows","getRowId","stateReducer","useControlledState","rest","useTable","plugins","instanceRef","useRef","getInstance","current","Object","assign","hooks","filter","Boolean","forEach","plugin","getHooks","useOptions","data","columns","userColumns","getStateReducer","reducer","useCallback","type","console","info","Error","stateReducers","Array","isArray","reduce","s","handler","reducerState","dispatch","useReducer","undefined","init","instance","useMemo","columnsDeps","allColumns","map","allColumnsDeps","rows","flatRows","rowsById","allColumnsQueue","length","column","shift","accessRowsForColumn","accessValueHooks","accessValue","initialRows","useInstanceAfterData","visibleColumns","visibleColumnsDeps","find","push","process","env","NODE_ENV","duplicateColumns","i","findIndex","headerGroups","headerGroupsDeps","headers","flatHeaders","all","headerGroup","useInstanceBeforeDimensions","visibleColumnsDep","isVisible","sort","totalColumnsMinWidth","totalColumnsWidth","totalColumnsMaxWidth","calculateHeaderWidths","useInstance","render","getHeaderProps","getFooterProps","recurse","getHeaderGroupProps","getFooterGroupProps","footerGroups","reverse","prepareRow","getRowProps","allCells","value","values","cell","getCellProps","cells","getTableProps","getTableBodyProps","useFinalInstance","left","sumTotalMinWidth","sumTotalWidth","sumTotalMaxWidth","sumTotalFlexWidth","header","subHeaders","totalLeft","totalMinWidth","totalWidth","totalMaxWidth","totalFlexWidth","minWidth","Math","min","max","width","maxWidth","canResize","accessRow","originalRow","rowIndex","depth","parentRows","original","originalSubRows","accessor"],"mappings":"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","sourcesContent":["import React from 'react'\n\n//\n\nimport {\n  linkColumnStructure,\n  flattenColumns,\n  assignColumnAccessor,\n  unpreparedAccessWarning,\n  makeHeaderGroups,\n  decorateColumn,\n} from '../utils'\n\nimport {\n  useGetLatest,\n  reduceHooks,\n  actions,\n  loopHooks,\n  makePropGetter,\n  makeRenderer,\n} from '../publicUtils'\n\nimport makeDefaultPluginHooks from '../makeDefaultPluginHooks'\n\nimport { useColumnVisibility } from './useColumnVisibility'\n\nconst defaultInitialState = {}\nconst defaultColumnInstance = {}\nconst defaultReducer = (state, action, prevState) => state\nconst defaultGetSubRows = (row, index) => row.subRows || []\nconst defaultGetRowId = (row, index, parent) =>\n  `${parent ? [parent.id, index].join('.') : index}`\nconst defaultUseControlledState = d => d\n\nfunction applyDefaults(props) {\n  const {\n    initialState = defaultInitialState,\n    defaultColumn = defaultColumnInstance,\n    getSubRows = defaultGetSubRows,\n    getRowId = defaultGetRowId,\n    stateReducer = defaultReducer,\n    useControlledState = defaultUseControlledState,\n    ...rest\n  } = props\n\n  return {\n    ...rest,\n    initialState,\n    defaultColumn,\n    getSubRows,\n    getRowId,\n    stateReducer,\n    useControlledState,\n  }\n}\n\nexport const useTable = (props, ...plugins) => {\n  // Apply default props\n  props = applyDefaults(props)\n\n  // Add core plugins\n  plugins = [useColumnVisibility, ...plugins]\n\n  // Create the table instance\n  let instanceRef = React.useRef({})\n\n  // Create a getter for the instance (helps avoid a lot of potential memory leaks)\n  const getInstance = useGetLatest(instanceRef.current)\n\n  // Assign the props, plugins and hooks to the instance\n  Object.assign(getInstance(), {\n    ...props,\n    plugins,\n    hooks: makeDefaultPluginHooks(),\n  })\n\n  // Allow plugins to register hooks as early as possible\n  plugins.filter(Boolean).forEach(plugin => {\n    plugin(getInstance().hooks)\n  })\n\n  // Consume all hooks and make a getter for them\n  const getHooks = useGetLatest(getInstance().hooks)\n  getInstance().getHooks = getHooks\n  delete getInstance().hooks\n\n  // Allow useOptions hooks to modify the options coming into the table\n  Object.assign(\n    getInstance(),\n    reduceHooks(getHooks().useOptions, applyDefaults(props))\n  )\n\n  const {\n    data,\n    columns: userColumns,\n    initialState,\n    defaultColumn,\n    getSubRows,\n    getRowId,\n    stateReducer,\n    useControlledState,\n  } = getInstance()\n\n  // Setup user reducer ref\n  const getStateReducer = useGetLatest(stateReducer)\n\n  // Build the reducer\n  const reducer = React.useCallback(\n    (state, action) => {\n      // Detect invalid actions\n      if (!action.type) {\n        console.info({ action })\n        throw new Error('Unknown Action ðŸ‘†')\n      }\n\n      // Reduce the state from all plugin reducers\n      return [\n        ...getHooks().stateReducers,\n        // Allow the user to add their own state reducer(s)\n        ...(Array.isArray(getStateReducer())\n          ? getStateReducer()\n          : [getStateReducer()]),\n      ].reduce(\n        (s, handler) => handler(s, action, state, getInstance()) || s,\n        state\n      )\n    },\n    [getHooks, getStateReducer, getInstance]\n  )\n\n  // Start the reducer\n  const [reducerState, dispatch] = React.useReducer(reducer, undefined, () =>\n    reducer(initialState, { type: actions.init })\n  )\n\n  // Allow the user to control the final state with hooks\n  const state = reduceHooks(\n    [...getHooks().useControlledState, useControlledState],\n    reducerState,\n    { instance: getInstance() }\n  )\n\n  Object.assign(getInstance(), {\n    state,\n    dispatch,\n  })\n\n  // Decorate All the columns\n  const columns = React.useMemo(\n    () =>\n      linkColumnStructure(\n        reduceHooks(getHooks().columns, userColumns, {\n          instance: getInstance(),\n        })\n      ),\n    [\n      getHooks,\n      getInstance,\n      userColumns,\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n      ...reduceHooks(getHooks().columnsDeps, [], { instance: getInstance() }),\n    ]\n  )\n  getInstance().columns = columns\n\n  // Get the flat list of all columns and allow hooks to decorate\n  // those columns (and trigger this memoization via deps)\n  let allColumns = React.useMemo(\n    () =>\n      reduceHooks(getHooks().allColumns, flattenColumns(columns), {\n        instance: getInstance(),\n      }).map(assignColumnAccessor),\n    [\n      columns,\n      getHooks,\n      getInstance,\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n      ...reduceHooks(getHooks().allColumnsDeps, [], {\n        instance: getInstance(),\n      }),\n    ]\n  )\n  getInstance().allColumns = allColumns\n\n  // Access the row model using initial columns\n  const [rows, flatRows, rowsById] = React.useMemo(() => {\n    let rows = []\n    let flatRows = []\n    const rowsById = {}\n\n    const allColumnsQueue = [...allColumns]\n\n    while (allColumnsQueue.length) {\n      const column = allColumnsQueue.shift()\n      accessRowsForColumn({\n        data,\n        rows,\n        flatRows,\n        rowsById,\n        column,\n        getRowId,\n        getSubRows,\n        accessValueHooks: getHooks().accessValue,\n        getInstance,\n      })\n    }\n\n    return [rows, flatRows, rowsById]\n  }, [allColumns, data, getRowId, getSubRows, getHooks, getInstance])\n\n  Object.assign(getInstance(), {\n    rows,\n    initialRows: [...rows],\n    flatRows,\n    rowsById,\n    // materializedColumns,\n  })\n\n  loopHooks(getHooks().useInstanceAfterData, getInstance())\n\n  // Get the flat list of all columns AFTER the rows\n  // have been access, and allow hooks to decorate\n  // those columns (and trigger this memoization via deps)\n  let visibleColumns = React.useMemo(\n    () =>\n      reduceHooks(getHooks().visibleColumns, allColumns, {\n        instance: getInstance(),\n      }).map(d => decorateColumn(d, defaultColumn)),\n    [\n      getHooks,\n      allColumns,\n      getInstance,\n      defaultColumn,\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n      ...reduceHooks(getHooks().visibleColumnsDeps, [], {\n        instance: getInstance(),\n      }),\n    ]\n  )\n\n  // Combine new visible columns with all columns\n  allColumns = React.useMemo(() => {\n    const columns = [...visibleColumns]\n\n    allColumns.forEach(column => {\n      if (!columns.find(d => d.id === column.id)) {\n        columns.push(column)\n      }\n    })\n\n    return columns\n  }, [allColumns, visibleColumns])\n  getInstance().allColumns = allColumns\n\n  if (process.env.NODE_ENV !== 'production') {\n    const duplicateColumns = allColumns.filter((column, i) => {\n      return allColumns.findIndex(d => d.id === column.id) !== i\n    })\n\n    if (duplicateColumns.length) {\n      console.info(allColumns)\n      throw new Error(\n        `Duplicate columns were found with ids: \"${duplicateColumns\n          .map(d => d.id)\n          .join(', ')}\" in the columns array above`\n      )\n    }\n  }\n\n  // Make the headerGroups\n  const headerGroups = React.useMemo(\n    () =>\n      reduceHooks(\n        getHooks().headerGroups,\n        makeHeaderGroups(visibleColumns, defaultColumn),\n        getInstance()\n      ),\n    [\n      getHooks,\n      visibleColumns,\n      defaultColumn,\n      getInstance,\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n      ...reduceHooks(getHooks().headerGroupsDeps, [], {\n        instance: getInstance(),\n      }),\n    ]\n  )\n  getInstance().headerGroups = headerGroups\n\n  // Get the first level of headers\n  const headers = React.useMemo(\n    () => (headerGroups.length ? headerGroups[0].headers : []),\n    [headerGroups]\n  )\n  getInstance().headers = headers\n\n  // Provide a flat header list for utilities\n  getInstance().flatHeaders = headerGroups.reduce(\n    (all, headerGroup) => [...all, ...headerGroup.headers],\n    []\n  )\n\n  loopHooks(getHooks().useInstanceBeforeDimensions, getInstance())\n\n  // Filter columns down to visible ones\n  const visibleColumnsDep = visibleColumns\n    .filter(d => d.isVisible)\n    .map(d => d.id)\n    .sort()\n    .join('_')\n\n  visibleColumns = React.useMemo(\n    () => visibleColumns.filter(d => d.isVisible),\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [visibleColumns, visibleColumnsDep]\n  )\n  getInstance().visibleColumns = visibleColumns\n\n  // Header Visibility is needed by this point\n  const [\n    totalColumnsMinWidth,\n    totalColumnsWidth,\n    totalColumnsMaxWidth,\n  ] = calculateHeaderWidths(headers)\n\n  getInstance().totalColumnsMinWidth = totalColumnsMinWidth\n  getInstance().totalColumnsWidth = totalColumnsWidth\n  getInstance().totalColumnsMaxWidth = totalColumnsMaxWidth\n\n  loopHooks(getHooks().useInstance, getInstance())\n\n  // Each materialized header needs to be assigned a render function and other\n  // prop getter properties here.\n  ;[...getInstance().flatHeaders, ...getInstance().allColumns].forEach(\n    column => {\n      // Give columns/headers rendering power\n      column.render = makeRenderer(getInstance(), column)\n\n      // Give columns/headers a default getHeaderProps\n      column.getHeaderProps = makePropGetter(getHooks().getHeaderProps, {\n        instance: getInstance(),\n        column,\n      })\n\n      // Give columns/headers a default getFooterProps\n      column.getFooterProps = makePropGetter(getHooks().getFooterProps, {\n        instance: getInstance(),\n        column,\n      })\n    }\n  )\n\n  getInstance().headerGroups = React.useMemo(\n    () =>\n      headerGroups.filter((headerGroup, i) => {\n        // Filter out any headers and headerGroups that don't have visible columns\n        headerGroup.headers = headerGroup.headers.filter(column => {\n          const recurse = headers =>\n            headers.filter(column => {\n              if (column.headers) {\n                return recurse(column.headers)\n              }\n              return column.isVisible\n            }).length\n          if (column.headers) {\n            return recurse(column.headers)\n          }\n          return column.isVisible\n        })\n\n        // Give headerGroups getRowProps\n        if (headerGroup.headers.length) {\n          headerGroup.getHeaderGroupProps = makePropGetter(\n            getHooks().getHeaderGroupProps,\n            { instance: getInstance(), headerGroup, index: i }\n          )\n\n          headerGroup.getFooterGroupProps = makePropGetter(\n            getHooks().getFooterGroupProps,\n            { instance: getInstance(), headerGroup, index: i }\n          )\n\n          return true\n        }\n\n        return false\n      }),\n    [headerGroups, getInstance, getHooks]\n  )\n\n  getInstance().footerGroups = [...getInstance().headerGroups].reverse()\n\n  // The prepareRow function is absolutely necessary and MUST be called on\n  // any rows the user wishes to be displayed.\n\n  getInstance().prepareRow = React.useCallback(\n    row => {\n      row.getRowProps = makePropGetter(getHooks().getRowProps, {\n        instance: getInstance(),\n        row,\n      })\n\n      // Build the visible cells for each row\n      row.allCells = allColumns.map(column => {\n        const value = row.values[column.id]\n\n        const cell = {\n          column,\n          row,\n          value,\n        }\n\n        // Give each cell a getCellProps base\n        cell.getCellProps = makePropGetter(getHooks().getCellProps, {\n          instance: getInstance(),\n          cell,\n        })\n\n        // Give each cell a renderer function (supports multiple renderers)\n        cell.render = makeRenderer(getInstance(), column, {\n          row,\n          cell,\n          value,\n        })\n\n        return cell\n      })\n\n      row.cells = visibleColumns.map(column =>\n        row.allCells.find(cell => cell.column.id === column.id)\n      )\n\n      // need to apply any row specific hooks (useExpanded requires this)\n      loopHooks(getHooks().prepareRow, row, { instance: getInstance() })\n    },\n    [getHooks, getInstance, allColumns, visibleColumns]\n  )\n\n  getInstance().getTableProps = makePropGetter(getHooks().getTableProps, {\n    instance: getInstance(),\n  })\n\n  getInstance().getTableBodyProps = makePropGetter(\n    getHooks().getTableBodyProps,\n    {\n      instance: getInstance(),\n    }\n  )\n\n  loopHooks(getHooks().useFinalInstance, getInstance())\n\n  return getInstance()\n}\n\nfunction calculateHeaderWidths(headers, left = 0) {\n  let sumTotalMinWidth = 0\n  let sumTotalWidth = 0\n  let sumTotalMaxWidth = 0\n  let sumTotalFlexWidth = 0\n\n  headers.forEach(header => {\n    let { headers: subHeaders } = header\n\n    header.totalLeft = left\n\n    if (subHeaders && subHeaders.length) {\n      const [\n        totalMinWidth,\n        totalWidth,\n        totalMaxWidth,\n        totalFlexWidth,\n      ] = calculateHeaderWidths(subHeaders, left)\n      header.totalMinWidth = totalMinWidth\n      header.totalWidth = totalWidth\n      header.totalMaxWidth = totalMaxWidth\n      header.totalFlexWidth = totalFlexWidth\n    } else {\n      header.totalMinWidth = header.minWidth\n      header.totalWidth = Math.min(\n        Math.max(header.minWidth, header.width),\n        header.maxWidth\n      )\n      header.totalMaxWidth = header.maxWidth\n      header.totalFlexWidth = header.canResize ? header.totalWidth : 0\n    }\n    if (header.isVisible) {\n      left += header.totalWidth\n      sumTotalMinWidth += header.totalMinWidth\n      sumTotalWidth += header.totalWidth\n      sumTotalMaxWidth += header.totalMaxWidth\n      sumTotalFlexWidth += header.totalFlexWidth\n    }\n  })\n\n  return [sumTotalMinWidth, sumTotalWidth, sumTotalMaxWidth, sumTotalFlexWidth]\n}\n\nfunction accessRowsForColumn({\n  data,\n  rows,\n  flatRows,\n  rowsById,\n  column,\n  getRowId,\n  getSubRows,\n  accessValueHooks,\n  getInstance,\n}) {\n  // Access the row's data column-by-column\n  // We do it this way so we can incrementally add materialized\n  // columns after the first pass and avoid excessive looping\n  const accessRow = (originalRow, rowIndex, depth = 0, parent, parentRows) => {\n    // Keep the original reference around\n    const original = originalRow\n\n    const id = getRowId(originalRow, rowIndex, parent)\n\n    let row = rowsById[id]\n\n    // If the row hasn't been created, let's make it\n    if (!row) {\n      row = {\n        id,\n        original,\n        index: rowIndex,\n        depth,\n        cells: [{}], // This is a dummy cell\n      }\n\n      // Override common array functions (and the dummy cell's getCellProps function)\n      // to show an error if it is accessed without calling prepareRow\n      row.cells.map = unpreparedAccessWarning\n      row.cells.filter = unpreparedAccessWarning\n      row.cells.forEach = unpreparedAccessWarning\n      row.cells[0].getCellProps = unpreparedAccessWarning\n\n      // Create the cells and values\n      row.values = {}\n\n      // Push this row into the parentRows array\n      parentRows.push(row)\n      // Keep track of every row in a flat array\n      flatRows.push(row)\n      // Also keep track of every row by its ID\n      rowsById[id] = row\n\n      // Get the original subrows\n      row.originalSubRows = getSubRows(originalRow, rowIndex)\n\n      // Then recursively access them\n      if (row.originalSubRows) {\n        const subRows = []\n        row.originalSubRows.forEach((d, i) =>\n          accessRow(d, i, depth + 1, row, subRows)\n        )\n        // Keep the new subRows array on the row\n        row.subRows = subRows\n      }\n    } else if (row.subRows) {\n      // If the row exists, then it's already been accessed\n      // Keep recursing, but don't worry about passing the\n      // accumlator array (those rows already exist)\n      row.originalSubRows.forEach((d, i) => accessRow(d, i, depth + 1, row))\n    }\n\n    // If the column has an accessor, use it to get a value\n    if (column.accessor) {\n      row.values[column.id] = column.accessor(\n        originalRow,\n        rowIndex,\n        row,\n        parentRows,\n        data\n      )\n    }\n\n    // Allow plugins to manipulate the column value\n    row.values[column.id] = reduceHooks(\n      accessValueHooks,\n      row.values[column.id],\n      {\n        row,\n        column,\n        instance: getInstance(),\n      },\n      true\n    )\n  }\n\n  data.forEach((originalRow, rowIndex) =>\n    accessRow(originalRow, rowIndex, 0, undefined, rows)\n  )\n}\n"]},"metadata":{},"sourceType":"module"}