{"ast":null,"code":"import React from 'react'; //\n\nimport { actions, ensurePluginOrder, functionalUpdate, useMountedLayoutEffect, useGetLatest } from '../publicUtils';\nimport { expandRows } from '../utils';\nconst pluginName = 'usePagination'; // Actions\n\nactions.resetPage = 'resetPage';\nactions.gotoPage = 'gotoPage';\nactions.setPageSize = 'setPageSize';\nexport const usePagination = hooks => {\n  hooks.stateReducers.push(reducer);\n  hooks.useInstance.push(useInstance);\n};\nusePagination.pluginName = pluginName;\n\nfunction reducer(state, action, previousState, instance) {\n  if (action.type === actions.init) {\n    return {\n      pageSize: 10,\n      pageIndex: 0,\n      ...state\n    };\n  }\n\n  if (action.type === actions.resetPage) {\n    return { ...state,\n      pageIndex: instance.initialState.pageIndex || 0\n    };\n  }\n\n  if (action.type === actions.gotoPage) {\n    const {\n      pageCount,\n      page\n    } = instance;\n    const newPageIndex = functionalUpdate(action.pageIndex, state.pageIndex);\n    let canNavigate = false;\n\n    if (newPageIndex > state.pageIndex) {\n      // next page\n      canNavigate = pageCount === -1 ? page.length >= state.pageSize : newPageIndex < pageCount;\n    } else if (newPageIndex < state.pageIndex) {\n      // prev page\n      canNavigate = newPageIndex > -1;\n    }\n\n    if (!canNavigate) {\n      return state;\n    }\n\n    return { ...state,\n      pageIndex: newPageIndex\n    };\n  }\n\n  if (action.type === actions.setPageSize) {\n    const {\n      pageSize\n    } = action;\n    const topRowIndex = state.pageSize * state.pageIndex;\n    const pageIndex = Math.floor(topRowIndex / pageSize);\n    return { ...state,\n      pageIndex,\n      pageSize\n    };\n  }\n}\n\nfunction useInstance(instance) {\n  const {\n    rows,\n    autoResetPage = true,\n    manualExpandedKey = 'expanded',\n    plugins,\n    pageCount: userPageCount,\n    paginateExpandedRows = true,\n    expandSubRows = true,\n    state: {\n      pageSize,\n      pageIndex,\n      expanded,\n      globalFilter,\n      filters,\n      groupBy,\n      sortBy\n    },\n    dispatch,\n    data,\n    manualPagination\n  } = instance;\n  ensurePluginOrder(plugins, ['useGlobalFilter', 'useFilters', 'useGroupBy', 'useSortBy', 'useExpanded'], 'usePagination');\n  const getAutoResetPage = useGetLatest(autoResetPage);\n  useMountedLayoutEffect(() => {\n    if (getAutoResetPage()) {\n      dispatch({\n        type: actions.resetPage\n      });\n    }\n  }, [dispatch, manualPagination ? null : data, globalFilter, filters, groupBy, sortBy]);\n  const pageCount = manualPagination ? userPageCount : Math.ceil(rows.length / pageSize);\n  const pageOptions = React.useMemo(() => pageCount > 0 ? [...new Array(pageCount)].fill(null).map((d, i) => i) : [], [pageCount]);\n  const page = React.useMemo(() => {\n    let page;\n\n    if (manualPagination) {\n      page = rows;\n    } else {\n      const pageStart = pageSize * pageIndex;\n      const pageEnd = pageStart + pageSize;\n      page = rows.slice(pageStart, pageEnd);\n    }\n\n    if (paginateExpandedRows) {\n      return page;\n    }\n\n    return expandRows(page, {\n      manualExpandedKey,\n      expanded,\n      expandSubRows\n    });\n  }, [expandSubRows, expanded, manualExpandedKey, manualPagination, pageIndex, pageSize, paginateExpandedRows, rows]);\n  const canPreviousPage = pageIndex > 0;\n  const canNextPage = pageCount === -1 ? page.length >= pageSize : pageIndex < pageCount - 1;\n  const gotoPage = React.useCallback(pageIndex => {\n    dispatch({\n      type: actions.gotoPage,\n      pageIndex\n    });\n  }, [dispatch]);\n  const previousPage = React.useCallback(() => {\n    return gotoPage(old => old - 1);\n  }, [gotoPage]);\n  const nextPage = React.useCallback(() => {\n    return gotoPage(old => old + 1);\n  }, [gotoPage]);\n  const setPageSize = React.useCallback(pageSize => {\n    dispatch({\n      type: actions.setPageSize,\n      pageSize\n    });\n  }, [dispatch]);\n  Object.assign(instance, {\n    pageOptions,\n    pageCount,\n    page,\n    canPreviousPage,\n    canNextPage,\n    gotoPage,\n    previousPage,\n    nextPage,\n    setPageSize\n  });\n}","map":{"version":3,"sources":["C:/Projects/TableSite/tablesite2/node_modules/react-table/src/plugin-hooks/usePagination.js"],"names":["React","actions","ensurePluginOrder","functionalUpdate","useMountedLayoutEffect","useGetLatest","expandRows","pluginName","resetPage","gotoPage","setPageSize","usePagination","hooks","stateReducers","push","reducer","useInstance","state","action","previousState","instance","type","init","pageSize","pageIndex","initialState","pageCount","page","newPageIndex","canNavigate","length","topRowIndex","Math","floor","rows","autoResetPage","manualExpandedKey","plugins","userPageCount","paginateExpandedRows","expandSubRows","expanded","globalFilter","filters","groupBy","sortBy","dispatch","data","manualPagination","getAutoResetPage","ceil","pageOptions","useMemo","Array","fill","map","d","i","pageStart","pageEnd","slice","canPreviousPage","canNextPage","useCallback","previousPage","old","nextPage","Object","assign"],"mappings":"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","sourcesContent":["import React from 'react'\n\n//\n\nimport {\n  actions,\n  ensurePluginOrder,\n  functionalUpdate,\n  useMountedLayoutEffect,\n  useGetLatest,\n} from '../publicUtils'\n\nimport { expandRows } from '../utils'\n\nconst pluginName = 'usePagination'\n\n// Actions\nactions.resetPage = 'resetPage'\nactions.gotoPage = 'gotoPage'\nactions.setPageSize = 'setPageSize'\n\nexport const usePagination = hooks => {\n  hooks.stateReducers.push(reducer)\n  hooks.useInstance.push(useInstance)\n}\n\nusePagination.pluginName = pluginName\n\nfunction reducer(state, action, previousState, instance) {\n  if (action.type === actions.init) {\n    return {\n      pageSize: 10,\n      pageIndex: 0,\n      ...state,\n    }\n  }\n\n  if (action.type === actions.resetPage) {\n    return {\n      ...state,\n      pageIndex: instance.initialState.pageIndex || 0,\n    }\n  }\n\n  if (action.type === actions.gotoPage) {\n    const { pageCount, page } = instance\n    const newPageIndex = functionalUpdate(action.pageIndex, state.pageIndex)\n    let canNavigate = false\n\n    if (newPageIndex > state.pageIndex) {\n      // next page\n      canNavigate =\n        pageCount === -1\n          ? page.length >= state.pageSize\n          : newPageIndex < pageCount\n    } else if (newPageIndex < state.pageIndex) {\n      // prev page\n      canNavigate = newPageIndex > -1\n    }\n\n    if (!canNavigate) {\n      return state\n    }\n\n    return {\n      ...state,\n      pageIndex: newPageIndex,\n    }\n  }\n\n  if (action.type === actions.setPageSize) {\n    const { pageSize } = action\n    const topRowIndex = state.pageSize * state.pageIndex\n    const pageIndex = Math.floor(topRowIndex / pageSize)\n\n    return {\n      ...state,\n      pageIndex,\n      pageSize,\n    }\n  }\n}\n\nfunction useInstance(instance) {\n  const {\n    rows,\n    autoResetPage = true,\n    manualExpandedKey = 'expanded',\n    plugins,\n    pageCount: userPageCount,\n    paginateExpandedRows = true,\n    expandSubRows = true,\n    state: {\n      pageSize,\n      pageIndex,\n      expanded,\n      globalFilter,\n      filters,\n      groupBy,\n      sortBy,\n    },\n    dispatch,\n    data,\n    manualPagination,\n  } = instance\n\n  ensurePluginOrder(\n    plugins,\n    ['useGlobalFilter', 'useFilters', 'useGroupBy', 'useSortBy', 'useExpanded'],\n    'usePagination'\n  )\n\n  const getAutoResetPage = useGetLatest(autoResetPage)\n\n  useMountedLayoutEffect(() => {\n    if (getAutoResetPage()) {\n      dispatch({ type: actions.resetPage })\n    }\n  }, [\n    dispatch,\n    manualPagination ? null : data,\n    globalFilter,\n    filters,\n    groupBy,\n    sortBy,\n  ])\n\n  const pageCount = manualPagination\n    ? userPageCount\n    : Math.ceil(rows.length / pageSize)\n\n  const pageOptions = React.useMemo(\n    () =>\n      pageCount > 0\n        ? [...new Array(pageCount)].fill(null).map((d, i) => i)\n        : [],\n    [pageCount]\n  )\n\n  const page = React.useMemo(() => {\n    let page\n\n    if (manualPagination) {\n      page = rows\n    } else {\n      const pageStart = pageSize * pageIndex\n      const pageEnd = pageStart + pageSize\n\n      page = rows.slice(pageStart, pageEnd)\n    }\n\n    if (paginateExpandedRows) {\n      return page\n    }\n\n    return expandRows(page, { manualExpandedKey, expanded, expandSubRows })\n  }, [\n    expandSubRows,\n    expanded,\n    manualExpandedKey,\n    manualPagination,\n    pageIndex,\n    pageSize,\n    paginateExpandedRows,\n    rows,\n  ])\n\n  const canPreviousPage = pageIndex > 0\n  const canNextPage =\n    pageCount === -1 ? page.length >= pageSize : pageIndex < pageCount - 1\n\n  const gotoPage = React.useCallback(\n    pageIndex => {\n      dispatch({ type: actions.gotoPage, pageIndex })\n    },\n    [dispatch]\n  )\n\n  const previousPage = React.useCallback(() => {\n    return gotoPage(old => old - 1)\n  }, [gotoPage])\n\n  const nextPage = React.useCallback(() => {\n    return gotoPage(old => old + 1)\n  }, [gotoPage])\n\n  const setPageSize = React.useCallback(\n    pageSize => {\n      dispatch({ type: actions.setPageSize, pageSize })\n    },\n    [dispatch]\n  )\n\n  Object.assign(instance, {\n    pageOptions,\n    pageCount,\n    page,\n    canPreviousPage,\n    canNextPage,\n    gotoPage,\n    previousPage,\n    nextPage,\n    setPageSize,\n  })\n}\n"]},"metadata":{},"sourceType":"module"}